{"version":3,"sources":["components/Point.js","components/Points.js","components/Canvas.js","App.js","reportWebVitals.js","index.js"],"names":["Point","className","points","onChangeColor","index","styles","reactCSS","container","position","left","currentXY","x","top","y","point","backgroundColor","colour","hex","picker","useEffect","ref","useRef","style","id","showPicker","color","onChange","disableAlpha","presetColors","defaultProps","Points","onRender","i","push","Canvas","canvasPoints","useState","setPoints","canvas","distance","Math","sqrt","pow","getColor","invSum","hsv","d","r","g","b","ctx","current","getContext","width","offsetWidth","height","offsetHeight","imageData","createImageData","console","log","data","length","floor","pixel","putImageData","shootPixel","App","mouseDown","start","end","mouseBound","setMouseBound","defaultColour","active","pointerOffset","size","dragIs","setDragIs","setCanvasPoints","dragStart","e","target","document","elementFromPoint","clientX","clientY","classList","contains","clientXY","type","substr","touches","add","parentNode","zIndex","closePickers","remove","isAnyAcive","onPicker","state","isClick","startXY","endXY","set","Array","rgb","getCanvasPoints","onPointerDown","onPointerMove","preventDefault","boundXY","clientWidth","clientHeight","max","min","drag","onPointerUp","dragEnd","update","newDragIs","onClick","newDragItem","splice","removeDragItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a5e29724.chunk.js","sourcesContent":["import React from 'react'\r\nimport reactCSS from 'reactcss'\r\nimport {useRef, useEffect, useState} from 'react'\r\nimport { SketchPicker } from 'react-color';\r\n\r\nconst Point = ({className, points, onChangeColor, index}) => {\r\n    // console.log(points, points[index])    \r\n    // const [color, setColor] =  useState({\r\n    //     color: points[index].colour.hex, \r\n    //     fullColor: points[index].colour\r\n    // })\r\n    // console.log(color[0])\r\n    const styles = reactCSS({\r\n        'default':{\r\n            container: {\r\n                position: 'absolute',\r\n                left: points[index].currentXY.x,\r\n                top: points[index].currentXY.y,\r\n            },\r\n            point: {\r\n                // backgroundColor: color.color,\r\n                backgroundColor: points[index].colour.hex,\r\n            },\r\n            picker:{\r\n                position: 'fixed'\r\n            }\r\n        },\r\n    })\r\n    // points[index].size = [points[index].ref.current.offsetWidth,points[index].ref.current.offsetHeight]\r\n    useEffect(()=>{\r\n        // setColor(points[index].color)\r\n        // points[index].ref.current.parentNode.style.left = points[index].currentXY.x\r\n        // points[index].ref.current.parentNode.style.top= points[index].currentXY.y\r\n        // console.log(points[index].ref.current.parentNode.style.left, points[index].ref.current.parentNode.style.top)\r\n    })\r\n    const changeColor=(color)=>{\r\n        // console.log(\"tT changing color to\", color, color.hex)\r\n        // onChangeColor(color)\r\n        // points[index].colour = color\r\n        // onChangeColor(index, color)\r\n        // setColor({color: color.hex, fullColor: color})\r\n        // onChangeColor(index, color)\r\n    }\r\n    points[index].ref = useRef(null)\r\n    \r\n    return (\r\n        <div style={styles.container}>\r\n            <div \r\n                ref={points[index].ref} \r\n                style={styles.point} \r\n                className=\"dragItem\" \r\n                id={points[index].id}\r\n                // onClick={onClick(points[index])}\r\n            />\r\n            {points[index].showPicker && \r\n            <SketchPicker\r\n                style={{\r\n                    position: 'fixed'\r\n                }}\r\n                // color={color.color}\r\n                color={points[index].colour.hex}\r\n                // onChange={changeColor}\r\n                onChange={(color)=>onChangeColor(index, color)}\r\n                disableAlpha={true}\r\n                presetColors={[]}\r\n            />}\r\n        </div>\r\n    )\r\n}\r\n\r\nPoint.defaultProps = {\r\n    className: \"dragItem\",\r\n}\r\n\r\nexport default Point\r\n","import React from 'react'\r\nimport Point from \"./Point\"\r\nimport { useEffect } from 'react'\r\n\r\nconst Points = ({points, onChangeColor, onRender}) => {\r\n    // console.log(\"Points are \", points)\r\n    // const changeColor = (index, color)=>{\r\n    //     console.log(\"Changing color of point \"+index+\" to \",color)\r\n    // }\r\n\r\n    useEffect(() => {\r\n        onRender()\r\n    })\r\n\r\n    var Points = []\r\n    for(let i in points){\r\n        Points.push(<Point \r\n                        points={points}\r\n                        index={i} \r\n                        onChangeColor={onChangeColor}\r\n                        // onClick={onClick}\r\n                    />\r\n                    )\r\n    }\r\n    return Points\r\n    // return (\r\n    //     <>\r\n    //         {points.map((point)=>{\r\n    //             return(\r\n    //                 <>\r\n    //                     <Point \r\n    //                         point={point} \r\n    //                         onChangeColor={ChangeColor()}\r\n    //                         // onClick={onClick}\r\n    //                     />\r\n    //                 </>\r\n    //             )\r\n    //         })}\r\n    //     </>\r\n    // )\r\n}\r\n\r\nexport default Points\r\n","import React, { useState, useRef, useEffect } from 'react'\r\n\r\nconst Canvas = ({id, canvasPoints}) => {\r\n    // console.log(\"titu\",canvasPoints)\r\n    const [points, setPoints]=useState(canvasPoints)\r\n    const [canvas, setCanvas]=useState(useRef(null))\r\n\r\n    const distances=(position, points)=>{\r\n        let dist = new Array(points.length)\r\n        for (let i in points){\r\n            dist[i] =  distance(position, points)\r\n        }\r\n        return dist\r\n    }\r\n\r\n    const distance = (position, point)=>{\r\n        return Math.sqrt(Math.pow(point.x-position.x,2) + Math.pow(point.y-position.y,2))\r\n    }\r\n\r\n    const hsvToRgb=(hsv)=>{\r\n        // console.log(\"converting\", hsv)\r\n        // Using the alternative method provided at https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_RGB_alternative\r\n        const f=(n)=>{\r\n            let k = (n + hsv[0]/60) % 6\r\n            let output = hsv[2] - hsv[2]*hsv[1]*Math.max(0, Math.min(k, 4-k, 1))\r\n            return output\r\n        }\r\n        let rgb = [f(5)*255, f(3)*255, f(1)*255, 255]\r\n        // console.log(\"rgb is\",rgb)\r\n        return rgb\r\n    }\r\n\r\n    const getColor=(position)=>{\r\n        // let dist = distances(position, points)\r\n        let invSum = 0\r\n        let hsv = [0,0,0]//, 255]\r\n        // var t1, t0\r\n        // t0 = Date.now()\r\n        let colour = points[0].colour\r\n        for(let i in points){\r\n            // console.log(\"distance from point \"+i+\" is\"+distance(position, points[i]))\r\n            // t0 = Date.now()\r\n            let d = distance(position, points[i])\r\n            // t1=Date.now()-t0\r\n            // if(t1) console.log(\"distance elapsed=\", t1)\r\n            invSum += 1/d\r\n            // console.log(\"d\", d)\r\n            // console.log(\"invSum\", invSum)\r\n            // t0 = Date.now()\r\n            // hsv.h += 1/d*points[i].colour.h\r\n            // hsv.s += 1/d*points[i].colour.s\r\n            // hsv.v += 1/d*points[i].colour.v      \r\n            \r\n            // colour = points[i].colour\r\n            // hsv[0] += 1/d*colour.h\r\n            // hsv[1] += 1/d*colour.s\r\n            // hsv[2] += 1/d*colour.v \r\n            colour = points[i].colour\r\n            hsv[0] += 1/d*colour.r\r\n            hsv[1] += 1/d*colour.g\r\n            hsv[2] += 1/d*colour.b    \r\n            // t1=Date.now()-t0\r\n            // if(t1) console.log(\"hsv elapsed=\", t1)\r\n            // console.log(\"hsv is \", hsv)\r\n        }\r\n        // t1=Date.now()-t0\r\n        // if(t1) console.log(\"hsv elapsed=\", t1)   \r\n        // console.log(\"hsv is \", hsv)\r\n        hsv[0] /= invSum\r\n        hsv[1] /= invSum\r\n        hsv[2] /= invSum\r\n        // return hsvToRgb(hsv)\r\n        return hsv\r\n    }\r\n\r\n    const shootPixel=()=>{\r\n        var ctx = canvas.current.getContext('2d')\r\n        canvas.current.width = canvas.current.offsetWidth\r\n        canvas.current.height = canvas.current.offsetHeight\r\n        // console.log(\"context\", ctx)\r\n        const imageData = ctx.createImageData(canvas.current.width, canvas.current.height)\r\n        // console.log(\"canvasPoints are\", points)\r\n        // console.log(canvas.current.offsetWidth, canvas.current.offsetHeight)\r\n        // console.log(canvas.current.width, canvas.current.height)\r\n        // getColor({x:100,y:100}, points)\r\n        console.log(imageData.data.length)\r\n        if(points){\r\n            // let rgb = hsvToRgb(getColor({x:100,y:100}, points))\r\n            // console.log(\"hello\", points, points.length)\r\n            // console.log(\"color is\",rgb)\r\n            // console.log(\"Start array computation now\")\r\n            // var t1, t0\r\n            // t0 = Date.now()\r\n            // var hsv = new Array(4*canvas.current.width, canvas.current.height)\r\n            let count=0, a=0\r\n            // for(let y=0;y<canvas.current.width;y++){\r\n            //     for(let x=0;x<canvas.current.width;x++){\r\n                for (var i = 0; i < imageData.data.length; i += 4) {\r\n                    // let x, y\r\n                    var x = Math.floor(i/4) % canvas.current.width\r\n                    var y = Math.floor(Math.floor(i/4)/canvas.current.width)\r\n                    let pixel = getColor({x:x,y:y})\r\n                    // console.log(pixel)\r\n                    imageData.data[i] = pixel[0]\r\n                    imageData.data[i+1] = pixel[1]\r\n                    imageData.data[i+2] = pixel[2]\r\n                    imageData.data[i+3] = 255\r\n                    // count++\r\n                }\r\n            // }\r\n            console.log(count)\r\n            // console.log(imageData.data)\r\n            // t1=Date.now()-t0\r\n            // console.log(\"HSV over\")\r\n            // console.log(\"milliseconds elapsed=\", t1)\r\n            \r\n            // for (var i = 0; i < imageData.data.length; i += 4) {\r\n            // // for (var i = 0; i < canvas.current.width*4; i += 4) {\r\n            //     // let x, y\r\n            //     var x = Math.floor(i/4) % canvas.current.width\r\n            //     var y = Math.floor(Math.floor(i/4)/canvas.current.width)\r\n            //     // let rgb = hsvToRgb(getColor({x:x,y:y}, points))\r\n            //     imageData.data[i + 0] = rgb[0];  // R value\r\n            //     imageData.data[i + 1] = rgb[1];    // G value\r\n            //     imageData.data[i + 2] = rgb[2];  // B value\r\n            //     // imageData.data[i + 2] = rgb[2]*x/canvas.current.width;  // B value\r\n            //     imageData.data[i + 3] = 255;\r\n            //     // imageData.data[i + 3] = 255*y/canvas.current.height;  // A value\r\n            //     // imageData.data[i + 3] = 255*x/canvas.current.width;  // A value\r\n            // }\r\n            // const data = imageData.data \r\n            // data = hsv\r\n            ctx.putImageData(imageData, 0, 0);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        setPoints(canvasPoints)\r\n        shootPixel()\r\n    },)\r\n    return (   \r\n        <canvas id={id} ref={canvas}/>\r\n    )\r\n}\r\n\r\nexport default Canvas\r\n","import {useState, useEffect} from \"react\"\r\nimport Points from \"./components/Points\"\r\nimport Canvas from \"./components/Canvas\";\r\n// import {render} from \"./js/render\"\r\n\r\nfunction App() {\r\n    const [mouseBound, setMouseBound]=useState([\r\n        {   mouseDown: false,\r\n            start:{\r\n                x:0, \r\n                y:0\r\n            },\r\n            end:{\r\n                x:0, \r\n                y:0\r\n            }\r\n        }\r\n    ]);\r\n    var defaultColour = {\r\n        \"hsl\":{\"h\":53.835616438356155,\"s\":0.8795180722891567,\"l\":0.6745098039215687,\"a\":1},\"hex\":\"#f5e663\",\"rgb\":{\"r\":245,\"g\":230,\"b\":99,\"a\":1},\"hsv\":{\"h\":53.835616438356155,\"s\":0.5959183673469387,\"v\":0.9607843137254902,\"a\":1},\"oldHue\":53.33333333333332,\"source\":\"hex\"\r\n    }\r\n    const [dragIs, setDragIs] = useState([\r\n        {   // While not being dragged, [pointerOffset, currentXY, offset] stores the same value, the X and Y coordinate from the original position (0,0), (used in transform: translate3D(X, Y, 0))\r\n            // While being dragged, \r\n            //      pointerOffset[X, Y] stores the pointerOffset X and Y offset of the pointer to the anchor of dragItem\r\n            //      currentXY[X, Y] stores the total X and Y offsets from the pointerOffset position (0,0).\r\n            // After a drag event, all [pointerOffset, currentXY, offset] stores the same value, the X and Y coordinate from the original position (0,0); again. \r\n            ref: null,\r\n            active: false,\r\n            colour: defaultColour,\r\n            showPicker: false,\r\n            pointerOffset: {x:0, y:0},\r\n            currentXY: {x:50, y:50},\r\n            size: false\r\n        }\r\n    ])  \r\n    const getCanvasPoints=(set)=>{\r\n        let points = new Array(dragIs.length)\r\n        // console.log(\"setting Canvas points\")\r\n        for(let i in dragIs){\r\n            if(dragIs[i].size){\r\n                // console.log(dragIs[i].currentXY, dragIs[i].size)\r\n                // console.log(dragIs[i].colour)\r\n                points[i] = {\r\n                    x: dragIs[i].currentXY.x+dragIs[i].size[0]/2,\r\n                    y: dragIs[i].currentXY.y+dragIs[i].size[1]/2,\r\n                    colour: dragIs[i].colour.rgb\r\n                }\r\n            }\r\n        }\r\n        // console.log(\"newCanvasPoints are \", points)\r\n        if (set) setCanvasPoints(points)\r\n        return points\r\n    }\r\n    const [canvasPoints, setCanvasPoints] = useState(false)\r\n\r\n    const addDragItem = ()=>{\r\n        const newDragItem={\r\n            ref: null,\r\n            active: false,\r\n            colour: defaultColour,\r\n            showPicker: false,\r\n            pointerOffset: {x:0, y:0},\r\n            currentXY: {x:50, y:50},\r\n            size: false\r\n        }\r\n        setDragIs([...dragIs, newDragItem])\r\n    }\r\n    const removeDragItem = ({index})=>{\r\n        if (index === -1){\r\n            index = dragIs.length-1\r\n        }\r\n        console.log(\"Removing point with key \"+index)\r\n        let newDragIs = dragIs\r\n        newDragIs.splice(index, 1)\r\n        setDragIs([...newDragIs])\r\n        console.log(\"New points are \", dragIs)\r\n    }\r\n    const dragStart = (e)=>{\r\n        // mouseDown is to capture off location drags that go over inactive point\r\n        mouseBound.mouseDown = true;\r\n        setMouseBound(mouseBound)\r\n        // capturing target since touch and mouse output different e.target\r\n        var target = document.elementFromPoint(e.clientX, e.clientY)\r\n        // if (e.pointerType === \"touch\"){\r\n        //         target = document.elementFromPoint(e.clientX, e.clientY)\r\n        // }else{\r\n        //         target = e.target\r\n        // }\r\n        // if(!target.id===\"dragPalette\"){\r\n        //     console.log(target)\r\n        // }\r\n        if(target.classList.contains(\"dragItem\")){\r\n            // console.log(\"Target is\",target)\r\n            var index\r\n            for(let i in dragIs){\r\n                if(dragIs[i].ref.current === target){\r\n                    // console.log(\"now \"+ i)\r\n                    index = i\r\n                }\r\n            }\r\n\r\n            // console.log(dragIs[index])     \r\n            console.log(\"dragStart \"+index, dragIs[index])\r\n            // setting pointerOffset values at the start of a drag \r\n            let clientXY = {x:0, y:0}\r\n            if (e.type.substr(0,5) === \"touch\") {\r\n                clientXY = {x: e.touches[0].clientX, y: e.touches[0].clientY}\r\n            } else {\r\n                clientXY = {x: e.clientX, y: e.clientY}\r\n            }\r\n            mouseBound.start = clientXY\r\n            mouseBound.end = clientXY\r\n            setMouseBound(mouseBound)\r\n            // console.log(\"Setting mouseBound\", mouseBound)\r\n            dragIs[index].pointerOffset.x = clientXY.x - dragIs[index].currentXY.x\r\n            dragIs[index].pointerOffset.y = clientXY.y - dragIs[index].currentXY.y\r\n            // console.log(\"dragStart \", dragIs[index].object.getBoundingClientRect().left, dragIs[index].object.getBoundingClientRect().top)\r\n            // console.log(\"dragStart initX, initY = [\" + [dragIs[index].pointerOffset[0], dragIs[index].pointerOffset[1]] + \"]\")\r\n            dragIs[index].active = true\r\n            dragIs[index].ref.current.classList.add(\"active\")\r\n            dragIs[index].ref.current.parentNode.style.zIndex = 1\r\n            // console.log(\"Now dragIs[index] is\", dragIs[index])\r\n            setDragIs([...dragIs])\r\n        }\r\n    }\r\n    const drag = (e)=>{\r\n        if(isAnyAcive()){\r\n            var index\r\n            for(let i in dragIs){\r\n                if(dragIs[i].active){\r\n                    index = i\r\n                }\r\n            }\r\n            // console.log(\"Pushing...\")\r\n            e.preventDefault();\r\n\r\n            // Calculating current XY \r\n            let clientXY = {x:0, y:0}\r\n            if (e.type.substr(0,5) === \"touch\") {\r\n                clientXY = {x: e.touches[0].clientX, y: e.touches[0].clientY}\r\n            } else {\r\n                clientXY = {x: e.clientX, y: e.clientY}\r\n            }\r\n            mouseBound.end = clientXY\r\n            setMouseBound(mouseBound)\r\n            if(!isClick(mouseBound.start, mouseBound.end)){\r\n                onPicker(dragIs[index], false)\r\n                closePickers(index)\r\n            \r\n                dragIs[index].currentXY.x = clientXY.x - dragIs[index].pointerOffset.x\r\n                dragIs[index].currentXY.y = clientXY.y - dragIs[index].pointerOffset.y\r\n                \r\n                // let boundXY = [[dragIs[index].ref.current.parentNode.parentNode.getBoundingClientRect().left, \r\n                //                 dragIs[index].ref.current.parentNode.parentNode.getBoundingClientRect().top\r\n                //                 ],\r\n                //                 [0,0]\r\n                //             ]\r\n                let boundXY = [[0,0],[0,0]]\r\n                boundXY[1] = [boundXY[0][0]+dragIs[index].ref.current.parentNode.parentNode.clientWidth-dragIs[index].size[0], \r\n                                boundXY[0][1]+dragIs[index].ref.current.parentNode.parentNode.clientHeight-dragIs[index].size[1]]\r\n                // console.log(\"boundXY is\", boundXY);\r\n                dragIs[index].currentXY.x = Math.max(Math.min(dragIs[index].currentXY.x, boundXY[1][0]), boundXY[0][0])\r\n                dragIs[index].currentXY.y = Math.max(Math.min(dragIs[index].currentXY.y, boundXY[1][1]), boundXY[0][1])\r\n                dragIs[index].ref.current.parentNode.style.left = dragIs[index].currentXY.x\r\n                dragIs[index].ref.current.parentNode.style.top = dragIs[index].currentXY.y\r\n                // console.log(\"dragIs[index] is\", dragIs[index])\r\n                \r\n                setDragIs([...dragIs])\r\n            }\r\n\r\n        }else if(mouseBound.mouseDown){\r\n            // console.log(\"None active\")\r\n            // console.log(e)\r\n            dragStart(e)\r\n        }\r\n    }\r\n    const dragEnd = (e)=>{\r\n        mouseBound.mouseDown = false;\r\n        setMouseBound(mouseBound)\r\n        var index\r\n        for(let i in dragIs) \r\n            if(dragIs[i].active)\r\n                index = i\r\n        if(index){\r\n            dragIs[index].pointerOffset.x = dragIs[index].currentXY.x;\r\n            dragIs[index].pointerOffset.y = dragIs[index].currentXY.y;\r\n            dragIs[index].ref.current.classList.remove(\"active\")\r\n            dragIs[index].active = false;\r\n            \r\n            // console.log(\"mouseStart\", mouseBound.start)\r\n            // console.log(\"mouseEnd\", mouseBound.end)\r\n            // console.log(e, dragIs[index].showPicker)\r\n            if(isClick(mouseBound.start, mouseBound.end) && !dragIs[index].showPicker){\r\n                closePickers(index)\r\n                dragIs[index].ref.current.classList.add(\"active\")\r\n                dragIs[index].ref.current.parentNode.style.zIndex = 2;\r\n                onPicker(dragIs[index], true)\r\n            }\r\n            else{\r\n                onPicker(dragIs[index], false)\r\n                dragIs[index].ref.current.parentNode.style.zIndex = 1;\r\n            }\r\n\r\n            console.log(\"dragEnd \"+index, dragIs[index])\r\n            setDragIs([...dragIs])\r\n        }\r\n    }\r\n    const closePickers=(index)=>{\r\n        for(let i in dragIs){\r\n            dragIs[i].showPicker=false\r\n            dragIs[i].ref.current.classList.remove(\"active\")\r\n            dragIs[i].ref.current.parentNode.style.zIndex = 1;\r\n        }\r\n        dragIs[index].ref.current.classList.add(\"active\")\r\n        dragIs[index].ref.current.parentNode.style.zIndex = 2;\r\n        setDragIs(dragIs)\r\n    }\r\n    const isAnyAcive=()=>{\r\n        let active = false;\r\n        for (let i in dragIs){\r\n            active = active || dragIs[i].active; \r\n        }\r\n        return active;\r\n    }\r\n    const isPickerActive=()=>{\r\n        let showPicker = false;\r\n        for (let i in dragIs){\r\n            showPicker = showPicker || dragIs[i].showPicker; \r\n        }\r\n        return showPicker;\r\n    }\r\n    const onPicker=(point, state)=>{\r\n        // if(state)\r\n        //     point.showPicker = !point.showPicker\r\n        // else\r\n            point.showPicker = state\r\n    }\r\n    const isClick=(startXY, endXY)=>{\r\n        let tol=5\r\n        let value = Math.sqrt(Math.pow(endXY.x-startXY.x,2) + Math.pow(endXY.y-startXY.y,2))\r\n        return (value<=tol)\r\n    }\r\n    const initSizes=()=>{\r\n        let update = false\r\n        for (let i in dragIs){\r\n            // console.log(!dragIs[i].size)\r\n            if(!dragIs[i].size){\r\n                // console.log(\"setting size for \"+i )\r\n                update = true\r\n                dragIs[i].size = [dragIs[i].ref.current.offsetWidth, dragIs[i].ref.current.offsetHeight]\r\n            }\r\n        } \r\n        if(update) setDragIs(dragIs)\r\n    } \r\n    const onChangeColor=(index, color)=>{\r\n        // console.log(\"changing color of \"+ index, color)\r\n        let newDragIs = [...dragIs]\r\n        newDragIs[index].colour = color\r\n        setDragIs([...newDragIs])\r\n    }\r\n    useEffect(() => {\r\n        // console.log(\"dragIs were updated, updating points\")\r\n        getCanvasPoints(true)\r\n    }, [dragIs])\r\n\r\n\r\n    return (\r\n        <div className=\"App\" \r\n            // onTouchStart={(e)=>dragStart(e)} \r\n            // onMouseDown={(e)=>dragStart(e)}\r\n            // onTouchMove={(e)=>drag(e)} \r\n            // onMouseMove={(e)=>drag(e)}\r\n            // onTouchEnd={(e)=>dragEnd(e)} \r\n            // onMouseUp={(e)=>dragEnd(e)}\r\n\r\n            onPointerDown={(e)=>dragStart(e)} \r\n            onPointerMove={(e)=>drag(e)} \r\n            onPointerUp={(e)=>dragEnd(e)} \r\n        >\r\n            <div id=\"outerContainer\">\r\n                <div id=\"dragPalette\">\r\n                    <Canvas id={\"gradientPalette\"} canvasPoints={canvasPoints}/>\r\n                    <Points points={dragIs} onRender={initSizes} onChangeColor={onChangeColor}/>\r\n                </div>\r\n                <div id=\"point-manager\">\r\n                        <button className=\"button plus\" onClick={addDragItem}></button>\r\n                        <button className=\"button minus\" onClick={()=> removeDragItem({index: -1})}></button>\r\n                </div>\r\n                </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './css/style.css';\nimport './css/dragPalette.css';\nimport './css/pointManager.css';\nimport App from './App';\n// import dragHandle from './js/dragHandler';\nimport reportWebVitals from './reportWebVitals';\n\n// var dragIs;\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n// dragIs = dragHandle();"],"sourceRoot":""}