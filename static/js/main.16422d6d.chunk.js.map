{"version":3,"sources":["components/Point.js","components/Points.js","components/Canvas.js","App.js","reportWebVitals.js","index.js"],"names":["Point","colour","points","onChangeColor","index","hex","styles","reactCSS","default","container","left","currentXY","x","top","y","pointContainer","display","justifyContent","alignItems","height","width","flexWrap","point","backgroundColor","picker","pointRef","useRef","containerRef","className","style","ref","id","showPicker","position","color","onChange","disableAlpha","presetColors","defaultProps","Points","onRender","useEffect","i","push","worker","window","Worker","Canvas","canvasPoints","useState","setPoints","canvas","draw","imageData","current","getContext","putImageData","requestAnimationFrame","shootPixel","ctx","offsetWidth","offsetHeight","createImageData","imDataLength","data","length","terminate","postMessage","onerror","err","console","log","onmessage","e","t0","Date","now","t1","App","mouseDown","start","end","mouseBound","setMouseBound","rgbToHslHsvHex","rgb","M","m","C","hue","V","L","rgbArr","r","g","b","Math","max","min","hsv","h","s","v","a","hsl","abs","l","colorcode","floor","toString","repeat","defaultColour","random","active","pointerOffset","size","dragIs","setDragIs","hsvRgbObjToArr","obj","arr","setCanvasPoints","dragStart","target","document","elementFromPoint","clientX","clientY","classList","contains","clientXY","type","substr","touches","add","zIndex","closePickers","remove","parentNode","isAnyActive","onPicker","state","isClick","startXY","endXY","sqrt","pow","set","Array","colourArr","getCanvasPoints","onPointerDown","onPointerMove","preventDefault","boundXY","clientWidth","clientHeight","drag","onPointerUp","dragEnd","update","newDragIs","onClick","newDragItem","splice","removeDragItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.16422d6d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport reactCSS from \"reactcss\";\r\nimport { useRef, useEffect, useState } from \"react\";\r\nimport { SketchPicker } from \"react-color\";\r\n\r\nconst Point = ({ points, onChangeColor, index }) => {\r\n    var colour;\r\n    if (points[index].colour.hex) {\r\n        colour = points[index].colour.hex;\r\n    } else {\r\n        colour = points[index].colour;\r\n    }\r\n    const styles = reactCSS({\r\n        default: {\r\n            container: {\r\n                left: points[index].currentXY.x,\r\n                top: points[index].currentXY.y,\r\n            },\r\n            pointContainer: {\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                height: \"36px\",\r\n                width: \"36px\",\r\n                flexWrap: \"nowrap\",\r\n            },\r\n            point: {\r\n                backgroundColor: colour,\r\n            },\r\n            picker: {},\r\n        },\r\n    });\r\n    points[index].pointRef = useRef();\r\n    points[index].containerRef = useRef();\r\n    return (\r\n        <div\r\n            className=\"dragIContainer\"\r\n            style={styles.container}\r\n            ref={points[index].containerRef}\r\n        >\r\n            {/* point container */}\r\n            <div style={styles.pointContainer}>\r\n                <div\r\n                    ref={points[index].pointRef}\r\n                    style={styles.point}\r\n                    className=\"dragItem\"\r\n                    id={points[index].id}\r\n                />\r\n            </div>\r\n            {/* Color picker */}\r\n            {points[index].showPicker && (\r\n                <SketchPicker\r\n                    style={{\r\n                        position: \"fixed\",\r\n                    }}\r\n                    color={colour}\r\n                    onChange={(color) => onChangeColor(index, color)}\r\n                    disableAlpha={true}\r\n                    presetColors={[]}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\nPoint.defaultProps = {\r\n    className: \"dragItem\",\r\n};\r\n\r\nexport default Point;\r\n","import React from \"react\";\r\nimport Point from \"./Point\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst Points = ({ points, onChangeColor, onRender }) => {\r\n    useEffect(() => {\r\n        onRender();\r\n    });\r\n    var Points = [];\r\n    for (let i in points) {\r\n        Points.push(\r\n            <Point points={points} index={i} onChangeColor={onChangeColor} />\r\n        );\r\n    }\r\n    return Points;\r\n};\r\n\r\nexport default Points;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\n\r\nvar worker = new window.Worker(\"./gradientWorker.js\");\r\n\r\nconst Canvas = ({ id, canvasPoints }) => {\r\n    const [points, setPoints] = useState(canvasPoints);\r\n    const [canvas, setCanvas] = useState(useRef(null));\r\n    const draw = (imageData) => {\r\n        var ctx = canvas.current.getContext(\"2d\");\r\n        ctx.putImageData(imageData, 0, 0);\r\n        window.requestAnimationFrame(() => draw(imageData));\r\n    };\r\n    const shootPixel = () => {\r\n        var ctx = canvas.current.getContext(\"2d\");\r\n        canvas.current.width = canvas.current.offsetWidth;\r\n        canvas.current.height = canvas.current.offsetHeight;\r\n        const imageData = ctx.createImageData(\r\n            canvas.current.width,\r\n            canvas.current.height\r\n        );\r\n        var imDataLength = imageData.data.length;\r\n        // Calling worker\r\n        worker.terminate();\r\n        // worker = new window.Worker(\"./gradientWorker.js\", { type: \"module\" });\r\n        worker = new window.Worker(\"./gradientWorker.js\");\r\n        worker.postMessage({\r\n            imageData: imageData,\r\n            points: points,\r\n            canvas: {\r\n                width: canvas.current.width,\r\n                height: canvas.current.height,\r\n            },\r\n        });\r\n        worker.onerror = (err) => {\r\n            console.log(\"error\", err);\r\n        };\r\n        worker.onmessage = (e) => {\r\n            if (imDataLength === e.data.imageData.data.length) {\r\n                var t0 = Date.now();\r\n                draw(e.data.imageData);\r\n                var t1 = Date.now() - t0;\r\n                console.log(\"drawing time \" + t1 + \"ms\");\r\n            }\r\n        };\r\n    };\r\n\r\n    useEffect(() => {\r\n        setPoints(canvasPoints);\r\n        shootPixel();\r\n    });\r\n\r\n    return <canvas id={id} ref={canvas} />;\r\n};\r\n\r\nexport default Canvas;\r\n","import { useState, useEffect } from \"react\";\r\nimport Points from \"./components/Points\";\r\nimport Canvas from \"./components/Canvas\";\r\n// import {render} from \"./js/render\"\r\n\r\nfunction App() {\r\n    const [mouseBound, setMouseBound] = useState([\r\n        {\r\n            mouseDown: false,\r\n            start: {\r\n                x: 0,\r\n                y: 0,\r\n            },\r\n            end: {\r\n                x: 0,\r\n                y: 0,\r\n            },\r\n        },\r\n    ]);\r\n    const rgbToHslHsvHex = (rgb) => {\r\n        var rgbArr = [rgb.r, rgb.g, rgb.b];\r\n        var M, m, C, hue, I, V, L, Sv, Sl;\r\n        M = Math.max(...rgbArr);\r\n        m = Math.min(...rgbArr);\r\n        C = M - m;\r\n        I = (rgbArr[0] + rgbArr[1] + rgbArr[2]) / 3;\r\n        // Hue\r\n        if (C === 0) hue = 0;\r\n        else if (M === rgbArr[0]) hue = ((rgbArr[1] - rgbArr[2]) / C) % 6;\r\n        else if (M === rgbArr[1]) hue = (rgbArr[2] - rgbArr[0]) / C + 2;\r\n        else if (M === rgbArr[2]) hue = (rgbArr[0] - rgbArr[1]) / C + 4;\r\n        hue *= 60;\r\n        // Lightness and Value\r\n        V = M / 255;\r\n        L = (M + m) / (2 * 255);\r\n        // Saturation\r\n        if (V === 0) Sv = 0;\r\n        else Sv = C / (V * 255);\r\n        if (L === 1 || L === 0) Sl = 0;\r\n        else Sl = C / (255 * (1 - Math.abs(2 * L - 1)));\r\n\r\n        hue = ((hue % 360) + 360) % 360;\r\n        // L = (L % 1 + 1)%1\r\n        // V = (V % 1 + 1)%1\r\n        // Sv = (Sv % 1 + 1)%1\r\n        // Sl = (Sl % 1 + 1)%1\r\n        let hsv = { h: hue, s: Sv, v: V, a: 1 };\r\n        let hsl = { h: hue, s: Sl, l: L, a: 1 };\r\n        rgb.a = 1;\r\n        let hex = \"#\";\r\n        for (let i in rgbArr) {\r\n            let colorcode = Math.floor(rgbArr[i]).toString(16);\r\n            hex += \"0\".repeat(2 - colorcode.length) + colorcode;\r\n        }\r\n        return { rgb: rgb, hsv: hsv, hsl: hsl, hex: hex };\r\n    };\r\n    var defaultColour = rgbToHslHsvHex({\r\n        r: Math.random() * 255,\r\n        g: Math.random() * 255,\r\n        b: Math.random() * 255,\r\n    });\r\n    const [dragIs, setDragIs] = useState([\r\n        {\r\n            // While not being dragged, [pointerOffset, currentXY, offset] stores the same value, the X and Y coordinate from the original position (0,0), (used in transform: translate3D(X, Y, 0))\r\n            // While being dragged,\r\n            //      pointerOffset[X, Y] stores the pointerOffset X and Y offset of the pointer to the anchor of dragItem\r\n            //      currentXY[X, Y] stores the total X and Y offsets from the pointerOffset position (0,0).\r\n            // After a drag event, all [pointerOffset, currentXY, offset] stores the same value, the X and Y coordinate from the original position (0,0); again.\r\n            pointRef: null,\r\n            containerRef: null,\r\n            active: false,\r\n            colour: defaultColour,\r\n            showPicker: false,\r\n            pointerOffset: { x: 0, y: 0 },\r\n            currentXY: { x: 50, y: 50 },\r\n            size: false,\r\n        },\r\n    ]);\r\n    const hsvRgbObjToArr = (obj) => {\r\n        var arr = [\r\n            [0, 0, 0],\r\n            [0, 0, 0],\r\n        ];\r\n        arr[0] = [obj.hsv.h, obj.hsv.s, obj.hsv.v];\r\n        arr[1] = [obj.rgb.r, obj.rgb.g, obj.rgb.b];\r\n        return arr;\r\n    };\r\n    const getCanvasPoints = (set) => {\r\n        let points = new Array(dragIs.length);\r\n        for (let i in dragIs) {\r\n            if (dragIs[i].size) {\r\n                points[i] = {\r\n                    x: dragIs[i].currentXY.x + dragIs[i].size[0] / 2,\r\n                    y: dragIs[i].currentXY.y + dragIs[i].size[1] / 2,\r\n                    colour: dragIs[i].colour,\r\n                    colourArr: hsvRgbObjToArr(dragIs[i].colour),\r\n                };\r\n            }\r\n        }\r\n        if (set) setCanvasPoints(points);\r\n        return points;\r\n    };\r\n    const [canvasPoints, setCanvasPoints] = useState(false);\r\n\r\n    const addDragItem = () => {\r\n        var currentXY = { x: 50, y: 50 },\r\n            colour;\r\n        if (dragIs.length > 0) {\r\n            var boundXY = [\r\n                [0, 0],\r\n                [0, 0],\r\n            ];\r\n            boundXY[1] = [\r\n                boundXY[0][0] +\r\n                    dragIs[0].containerRef.current.parentNode.clientWidth -\r\n                    dragIs[0].size[0],\r\n                boundXY[0][1] +\r\n                    dragIs[0].containerRef.current.parentNode.clientHeight -\r\n                    dragIs[0].size[1],\r\n            ];\r\n            let x, y;\r\n            x = Math.floor(Math.random() * boundXY[1][0] + boundXY[0][0]);\r\n            y = Math.floor(Math.random() * boundXY[1][1] + boundXY[0][1]);\r\n            currentXY = { x: x, y: y };\r\n        }\r\n        colour = {\r\n            r: Math.random() * 255,\r\n            g: Math.random() * 255,\r\n            b: Math.random() * 255,\r\n        };\r\n        colour = rgbToHslHsvHex(colour);\r\n        const newDragItem = {\r\n            ref: null,\r\n            containerRef: null,\r\n            active: false,\r\n            colour: colour,\r\n            showPicker: false,\r\n            pointerOffset: { x: 0, y: 0 },\r\n            currentXY: currentXY,\r\n            size: false,\r\n        };\r\n        setDragIs([...dragIs, newDragItem]);\r\n    };\r\n    const removeDragItem = ({ index }) => {\r\n        if (index === -1) {\r\n            index = dragIs.length - 1;\r\n        }\r\n        console.log(\"Removing point with key \" + index);\r\n        let newDragIs = dragIs;\r\n        newDragIs.splice(index, 1);\r\n        setDragIs([...newDragIs]);\r\n        console.log(\"New points are \", dragIs);\r\n    };\r\n    const dragStart = (e) => {\r\n        // mouseDown is to capture off location drags that go over inactive point\r\n        mouseBound.mouseDown = true;\r\n        setMouseBound(mouseBound);\r\n        // capturing target since touch and mouse output different e.target\r\n        var target = document.elementFromPoint(e.clientX, e.clientY);\r\n        if (target.classList.contains(\"dragItem\")) {\r\n            var index;\r\n            for (let i in dragIs) {\r\n                if (dragIs[i].pointRef.current === target) {\r\n                    index = i;\r\n                }\r\n            }\r\n            console.log(\"dragStart \" + index, dragIs[index]);\r\n            let clientXY = { x: 0, y: 0 };\r\n            if (e.type.substr(0, 5) === \"touch\") {\r\n                clientXY = { x: e.touches[0].clientX, y: e.touches[0].clientY };\r\n            } else {\r\n                clientXY = { x: e.clientX, y: e.clientY };\r\n            }\r\n            mouseBound.start = clientXY;\r\n            mouseBound.end = clientXY;\r\n            setMouseBound(mouseBound);\r\n            dragIs[index].pointerOffset.x =\r\n                clientXY.x - dragIs[index].currentXY.x;\r\n            dragIs[index].pointerOffset.y =\r\n                clientXY.y - dragIs[index].currentXY.y;\r\n            dragIs[index].active = true;\r\n            dragIs[index].pointRef.current.classList.add(\"active\");\r\n            dragIs[index].containerRef.current.style.zIndex = 1;\r\n            setDragIs([...dragIs]);\r\n        }\r\n    };\r\n    const drag = (e) => {\r\n        if (isAnyActive()) {\r\n            var index;\r\n            for (let i in dragIs) {\r\n                if (dragIs[i].active) {\r\n                    index = i;\r\n                }\r\n            }\r\n            e.preventDefault();\r\n            // Calculating current XY\r\n            let clientXY = { x: 0, y: 0 };\r\n            if (e.type.substr(0, 5) === \"touch\") {\r\n                clientXY = { x: e.touches[0].clientX, y: e.touches[0].clientY };\r\n            } else {\r\n                clientXY = { x: e.clientX, y: e.clientY };\r\n            }\r\n            mouseBound.end = clientXY;\r\n            var target = document.elementFromPoint(clientXY.x, clientXY.y);\r\n            setMouseBound(mouseBound);\r\n            if (!isClick(mouseBound.start, mouseBound.end)) {\r\n                onPicker(dragIs[index], false);\r\n                closePickers(index);\r\n                var currentXY = { x: 0, y: 0 };\r\n                currentXY.x = clientXY.x - dragIs[index].pointerOffset.x;\r\n                currentXY.y = clientXY.y - dragIs[index].pointerOffset.y;\r\n                let boundXY = [\r\n                    [0, 0],\r\n                    [0, 0],\r\n                ];\r\n                boundXY[1] = [\r\n                    boundXY[0][0] +\r\n                        dragIs[index].containerRef.current.parentNode\r\n                            .clientWidth -\r\n                        dragIs[index].size[0],\r\n                    boundXY[0][1] +\r\n                        dragIs[index].containerRef.current.parentNode\r\n                            .clientHeight -\r\n                        dragIs[index].size[1],\r\n                ];\r\n                dragIs[index].currentXY.x = Math.max(\r\n                    Math.min(currentXY.x, boundXY[1][0]),\r\n                    boundXY[0][0]\r\n                );\r\n                dragIs[index].currentXY.y = Math.max(\r\n                    Math.min(currentXY.y, boundXY[1][1]),\r\n                    boundXY[0][1]\r\n                );\r\n\r\n                setDragIs([...dragIs]);\r\n            }\r\n        } else if (mouseBound.mouseDown) {\r\n            dragStart(e);\r\n        } else {\r\n            // var target = document.elementFromPoint(e.clientX, e.clientY)\r\n            // // console.log(target)\r\n            // try{\r\n            //     if(target.tagName===\"CANVAS\")\r\n            //         console.log(target.getContext('2d').getImageData(e.clientX, e.clientY, 1, 1).data)\r\n            // }\r\n            // catch{}\r\n        }\r\n    };\r\n    const dragEnd = (e) => {\r\n        mouseBound.mouseDown = false;\r\n        setMouseBound(mouseBound);\r\n        var index;\r\n        for (let i in dragIs) if (dragIs[i].active) index = i;\r\n        if (index) {\r\n            dragIs[index].pointerOffset.x = dragIs[index].currentXY.x;\r\n            dragIs[index].pointerOffset.y = dragIs[index].currentXY.y;\r\n            dragIs[index].active = false;\r\n            if (\r\n                isClick(mouseBound.start, mouseBound.end) &&\r\n                !dragIs[index].showPicker\r\n            ) {\r\n                closePickers(index);\r\n                dragIs[index].pointRef.current.classList.add(\"active\");\r\n                dragIs[index].containerRef.current.style.zIndex = 2;\r\n                onPicker(dragIs[index], true);\r\n            } else {\r\n                dragIs[index].pointRef.current.classList.remove(\"active\");\r\n                onPicker(dragIs[index], false);\r\n                dragIs[index].containerRef.current.style.zIndex = 1;\r\n            }\r\n\r\n            console.log(\"dragEnd \" + index, dragIs[index]);\r\n            setDragIs([...dragIs]);\r\n        }\r\n    };\r\n    const closePickers = (index) => {\r\n        for (let i in dragIs) {\r\n            dragIs[i].showPicker = false;\r\n            dragIs[i].pointRef.current.classList.remove(\"active\");\r\n            dragIs[i].containerRef.current.style.zIndex = 1;\r\n        }\r\n        dragIs[index].pointRef.current.classList.add(\"active\");\r\n        dragIs[index].pointRef.current.parentNode.style.zIndex = 2;\r\n        setDragIs(dragIs);\r\n    };\r\n    const isAnyActive = () => {\r\n        let active = false;\r\n        for (let i in dragIs) {\r\n            active = active || dragIs[i].active;\r\n        }\r\n        return active;\r\n    };\r\n    const isPickerActive = () => {\r\n        let showPicker = false;\r\n        for (let i in dragIs) {\r\n            showPicker = showPicker || dragIs[i].showPicker;\r\n        }\r\n        return showPicker;\r\n    };\r\n    const onPicker = (point, state) => {\r\n        point.showPicker = state;\r\n    };\r\n    const isClick = (startXY, endXY) => {\r\n        let tol = 5;\r\n        let value = Math.sqrt(\r\n            Math.pow(endXY.x - startXY.x, 2) + Math.pow(endXY.y - startXY.y, 2)\r\n        );\r\n        return value <= tol;\r\n    };\r\n    const initSizes = () => {\r\n        let update = false;\r\n        for (let i in dragIs) {\r\n            if (!dragIs[i].size) {\r\n                update = true;\r\n                dragIs[i].size = [\r\n                    dragIs[i].pointRef.current.offsetWidth,\r\n                    dragIs[i].pointRef.current.offsetHeight,\r\n                ];\r\n            }\r\n        }\r\n        if (update) setDragIs(dragIs);\r\n    };\r\n    const onChangeColor = (index, color) => {\r\n        let newDragIs = [...dragIs];\r\n        newDragIs[index].colour = color;\r\n        setDragIs([...newDragIs]);\r\n    };\r\n    useEffect(() => {\r\n        getCanvasPoints(true);\r\n    }, [dragIs]);\r\n\r\n    return (\r\n        <div\r\n            className=\"App\"\r\n            onPointerDown={(e) => dragStart(e)}\r\n            onPointerMove={(e) => drag(e)}\r\n            onPointerUp={(e) => dragEnd(e)}\r\n        >\r\n            <div id=\"outerContainer\">\r\n                <div id=\"dragPalette\">\r\n                    <Canvas\r\n                        id={\"gradientPalette\"}\r\n                        canvasPoints={canvasPoints}\r\n                    />\r\n                </div>\r\n                <Points\r\n                    points={dragIs}\r\n                    onRender={initSizes}\r\n                    onChangeColor={onChangeColor}\r\n                />\r\n                <div id=\"point-manager\">\r\n                    <button\r\n                        className=\"button plus\"\r\n                        onClick={addDragItem}\r\n                    ></button>\r\n                    <button\r\n                        className=\"button minus\"\r\n                        onClick={() => removeDragItem({ index: -1 })}\r\n                    ></button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './css/style.css';\nimport './css/dragPalette.css';\nimport './css/pointManager.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}