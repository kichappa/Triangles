{"version":3,"sources":["components/Point.js","components/Points.js","App.js","reportWebVitals.js","index.js"],"names":["Point","className","point","styles","reactCSS","container","position","left","currentXY","top","backgroundColor","colour","useEffect","size","ref","current","offsetWidth","offsetHeight","parentNode","style","useRef","id","defaultProps","Points","points","console","log","map","App","mouseDown","useState","active","pointerOffset","dragIs","setDragIs","dragStart","e","target","type","substr","document","elementFromPoint","touches","clientX","clientY","index","i","classList","add","zIndex","drag","isAnyAcive","preventDefault","boundXY","getBoundingClientRect","clientWidth","clientHeight","Math","max","min","dragEnd","remove","onTouchStart","onMouseDown","onTouchMove","onMouseMove","onTouchEnd","onMouseUp","onClick","length","newDragIs","splice","removeDragItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7dd9b7bb.chunk.js","sourcesContent":["import React from 'react'\r\nimport reactCSS from 'reactcss'\r\nimport {useRef, useEffect} from 'react'\r\n\r\nconst Point = ({className, point}) => {\r\n    const styles = reactCSS({\r\n        'default':{\r\n            container: {\r\n                position: 'absolute',\r\n                left: point.currentXY[0],\r\n                top: point.currentXY[1],\r\n              },\r\n            point: {\r\n                backgroundColor: point.colour,\r\n            }\r\n        },\r\n    })\r\n    useEffect(()=>{\r\n        point.size = [point.ref.current.offsetWidth,point.ref.current.offsetHeight]\r\n        point.ref.current.parentNode.style.left = point.currentXY[0]\r\n        point.ref.current.parentNode.style.top= point.currentXY[1]\r\n        // console.log(point.ref.current.parentNode.style.left, point.ref.current.parentNode.style.top)\r\n    })\r\n    point.ref = useRef(null)\r\n    return (\r\n        <div style={styles.container}>\r\n            <div ref={point.ref} style={styles.point} className=\"dragItem\" id={point.id}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nPoint.defaultProps = {\r\n    className: \"dragItem\",\r\n}\r\n\r\nexport default Point\r\n","import React from 'react'\r\nimport Point from \"./Point\"\r\n\r\nconst Points = ({points}) => {\r\n    console.log(\"Points are \", points)\r\n    return (\r\n        <>\r\n            {points.map((point)=>{\r\n                return(\r\n                    <>\r\n                        <Point point={point}/>\r\n                    </>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Points\r\n","import {useState} from \"react\"\nimport Points from \"./components/Points\"\n\nfunction App() {\n    var mouseDown = false;\n    const [dragIs, setDragIs] = useState([\n        {   // While not being dragged, [pointerOffset, currentXY, offset] stores the same value, the X and Y coordinate from the original position (0,0), (used in transform: translate3D(X, Y, 0))\n            // While being dragged, \n            //      pointerOffset[X, Y] stores the pointerOffset X and Y offset of the pointer to the anchor of dragItem\n            //      currentXY[X, Y] stores the total X and Y offsets from the pointerOffset position (0,0).\n            // After a drag event, all [pointerOffset, currentXY, offset] stores the same value, the X and Y coordinate from the original position (0,0); again. \n            ref: null,\n            active: false,\n            colour: \"#f5e663\",\n            pointerOffset: [0,0],\n            currentXY: [50, 50],\n            size: [0,0]\n        }\n    ])\n    const AddDragItem = ()=>{\n        const newDragItem={\n            ref: null,\n            active: false,\n            colour: \"#f5e663\",\n            pointerOffset: [0,0],\n            currentXY: [50, 50],\n            size: [0,0]\n        }\n        setDragIs([...dragIs, newDragItem])\n    }\n    const removeDragItem = ({index})=>{\n        if (index === -1){\n            index = dragIs.length-1\n        }\n        console.log(\"Removing point with key \"+index)\n        let newDragIs = dragIs\n        newDragIs.splice(index, 1)\n        setDragIs([...newDragIs])\n        console.log(\"New points are \", dragIs)\n    }\n    const dragStart = (e)=>{\n        // mouseDown is to capture off location drags that go over inactive point\n        mouseDown = true;\n        // capturing target since touch and mouse output different e.target\n        var target\n        if (e.type.substr(0,5) === \"touch\"){\n                target = document.elementFromPoint(e.touches[0].clientX, e.touches[0].clientY)\n        }else{\n                target = e.target\n        }\n        if(target.className === \"dragItem\"){\n            // console.log(\"Target is\",target)\n            var index\n            for(let i in dragIs){\n                if(dragIs[i].ref.current === target){\n                    console.log(\"now \"+ i)\n                    index = i\n                }\n            }\n            // console.log(dragIs[index])     \n            console.log(\"dragStart \"+index, dragIs[index])\n            // setting pointerOffset values at the start of a drag \n            if (e.type.substr(0,5) === \"touch\") {\n                dragIs[index].pointerOffset[0] = e.touches[0].clientX - dragIs[index].currentXY[0]\n                dragIs[index].pointerOffset[1] = e.touches[0].clientY - dragIs[index].currentXY[1]\n            } else {\n                dragIs[index].pointerOffset[0] = e.clientX - dragIs[index].currentXY[0]\n                dragIs[index].pointerOffset[1] = e.clientY - dragIs[index].currentXY[1]\n            }\n            // console.log(\"dragStart \", dragIs[index].object.getBoundingClientRect().left, dragIs[index].object.getBoundingClientRect().top)\n            // console.log(\"dragStart initX, initY = [\" + [dragIs[index].pointerOffset[0], dragIs[index].pointerOffset[1]] + \"]\")\n            dragIs[index].active = true\n            dragIs[index].ref.current.classList.add(\"active\")\n            dragIs[index].ref.current.parentNode.style.zIndex = 1\n            // console.log(\"Now dragIs[index] is\", dragIs[index])\n            setDragIs([...dragIs])\n        }\n    }\n    const drag = (e)=>{\n        if(isAnyAcive()){\n            var index\n            for(let i in dragIs){\n                if(dragIs[i].active){\n                    index = i\n                }\n            }\n            // console.log(\"Pushing...\")\n            e.preventDefault();\n\n            // Calculating current XY \n            if (e.type.substr(0,5) === \"touch\") {\n                dragIs[index].currentXY[0] = e.touches[0].clientX - dragIs[index].pointerOffset[0]\n                dragIs[index].currentXY[1] = e.touches[0].clientY - dragIs[index].pointerOffset[1]\n            } else {\n                dragIs[index].currentXY[0] = e.clientX - dragIs[index].pointerOffset[0]\n                dragIs[index].currentXY[1] = e.clientY - dragIs[index].pointerOffset[1]\n            }\n            let boundXY = [[dragIs[index].ref.current.parentNode.parentNode.getBoundingClientRect().left, \n                            dragIs[index].ref.current.parentNode.parentNode.getBoundingClientRect().top\n                            ],\n                            [0,0]]\n            boundXY[1] = [boundXY[0][0]+dragIs[index].ref.current.parentNode.parentNode.clientWidth-dragIs[index].size[0], \n                            boundXY[0][1]+dragIs[index].ref.current.parentNode.parentNode.clientHeight-dragIs[index].size[1]]\n            // console.log(\"boundXY is\", boundXY);\n            dragIs[index].currentXY[0] = Math.max(Math.min(dragIs[index].currentXY[0], boundXY[1][0]), boundXY[0][0])\n            dragIs[index].currentXY[1] = Math.max(Math.min(dragIs[index].currentXY[1], boundXY[1][1]), boundXY[0][1])\n            dragIs[index].ref.current.parentNode.style.left = dragIs[index].currentXY[0]\n            dragIs[index].ref.current.parentNode.style.top = dragIs[index].currentXY[1]\n            // console.log(\"dragIs[index] is\", dragIs[index])\n            \n            setDragIs([...dragIs])\n\n        }else if(mouseDown){\n            dragStart(e)\n        }\n    }\n    const dragEnd = (e)=>{\n        mouseDown=false\n        var index\n        for(let i in dragIs) \n            if(dragIs[i].active)\n                index = i\n        if(index){\n            dragIs[index].pointerOffset[0] = dragIs[index].currentXY[0];\n            dragIs[index].pointerOffset[1] = dragIs[index].currentXY[1];\n            dragIs[index].ref.current.classList.remove(\"active\")\n            dragIs[index].active = false;\n            dragIs[index].ref.current.parentNode.style.zIndex = 0;\n            \n            console.log(\"dragEnd \"+index, dragIs[index])\n            setDragIs([...dragIs])\n        }\n    }\n    const isAnyAcive=()=>{\n        let active = false;\n        for (let i in dragIs){\n            active = active || dragIs[i].active; \n        }\n        return active;\n    }\n    return (\n        <div className=\"App\" \n            onTouchStart={(e)=>dragStart(e)} \n            onMouseDown={(e)=>dragStart(e)}\n            onTouchMove={(e)=>drag(e)} \n            onMouseMove={(e)=>drag(e)}\n            onTouchEnd={(e)=>dragEnd(e)} \n            onMouseUp={(e)=>dragEnd(e)}\n        >\n            <div id=\"outerContainer\">\n                <div id=\"dragPalette\">\n                    <Points points={dragIs}/>\n                </div>\n                <div id=\"point-manager\">\n                        <button className=\"button plus\" onClick={AddDragItem}></button>\n                        <button className=\"button minus\" onClick={()=> removeDragItem({index: -1})}></button>\n                </div>\n                </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './css/style.css';\nimport './css/dragPalette.css';\nimport './css/pointManager.css';\nimport App from './App';\n// import dragHandle from './js/dragHandler';\nimport reportWebVitals from './reportWebVitals';\n\n// var dragIs;\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n// dragIs = dragHandle();"],"sourceRoot":""}