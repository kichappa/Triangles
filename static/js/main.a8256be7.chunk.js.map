{"version":3,"sources":["components/Point.js","components/Points.js","App.js","reportWebVitals.js","index.js"],"names":["Point","className","point","onChangeColor","useState","colour","color","setColor","console","log","styles","reactCSS","container","position","left","currentXY","x","top","y","backgroundColor","useEffect","size","ref","current","offsetWidth","offsetHeight","useRef","style","id","showPicker","onChange","hex","defaultProps","Points","points","i","push","index","changeColor","App","mouseDown","start","end","mouseBound","setMouseBound","active","pointerOffset","dragIs","setDragIs","dragStart","e","target","type","substr","document","elementFromPoint","touches","clientX","clientY","classList","contains","clientXY","add","parentNode","zIndex","isAnyAcive","onPicker","state","isClick","startXY","endXY","Math","sqrt","pow","onPointerDown","onPointerMove","preventDefault","boundXY","getBoundingClientRect","clientWidth","clientHeight","max","min","drag","onPointerUp","remove","dragEnd","onClick","length","newDragIs","splice","removeDragItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a8256be7.chunk.js","sourcesContent":["import React from 'react'\r\nimport reactCSS from 'reactcss'\r\nimport {useRef, useEffect, useState} from 'react'\r\nimport { SketchPicker } from 'react-color';\r\n\r\nconst Point = ({className, point, onChangeColor}) => {\r\n    const [color, setColor] =  useState(\r\n        point.colour\r\n    )\r\n    console.log(color[0])\r\n    const styles = reactCSS({\r\n        'default':{\r\n            container: {\r\n                position: 'absolute',\r\n                left: point.currentXY.x,\r\n                top: point.currentXY.y,\r\n              },\r\n            point: {\r\n                backgroundColor: color,\r\n            }\r\n        },\r\n    })\r\n    useEffect(()=>{\r\n        point.size = [point.ref.current.offsetWidth,point.ref.current.offsetHeight]\r\n        // setColor(point.color)\r\n        // point.ref.current.parentNode.style.left = point.currentXY.x\r\n        // point.ref.current.parentNode.style.top= point.currentXY.y\r\n        // console.log(point.ref.current.parentNode.style.left, point.ref.current.parentNode.style.top)\r\n    })\r\n    const ChangeColor=(color)=>{\r\n        // console.log(\"tT changing color to\", color, color.hex)\r\n        onChangeColor(color)\r\n        point.colour = color.hex\r\n        setColor(color.hex)\r\n    }\r\n    point.ref = useRef(null)\r\n    \r\n    return (\r\n        <div style={styles.container}>\r\n            <div \r\n                ref={point.ref} \r\n                style={styles.point} \r\n                className=\"dragItem\" \r\n                id={point.id}\r\n                // onClick={onClick(point)}\r\n            />\r\n            {point.showPicker && \r\n            <SketchPicker\r\n                color={color}\r\n                onChange={ChangeColor}\r\n            />}\r\n        </div>\r\n    )\r\n}\r\n\r\nPoint.defaultProps = {\r\n    className: \"dragItem\",\r\n}\r\n\r\nexport default Point\r\n","import React from 'react'\r\nimport Point from \"./Point\"\r\n\r\nconst Points = ({points, onChangeColor}) => {\r\n    console.log(\"Points are \", points)\r\n    const changeColor = (index, color)=>{\r\n        console.log(\"Changing color of point \"+index+\" to \",color)\r\n    }\r\n\r\n    var Points = []\r\n    for(let i in points){\r\n        Points.push(<Point \r\n                        point={points[i]} \r\n                        onChangeColor={(color)=>changeColor(i, color)}\r\n                        // onClick={onClick}\r\n                    />\r\n                    )\r\n    }\r\n    return Points\r\n    // return (\r\n    //     <>\r\n    //         {points.map((point)=>{\r\n    //             return(\r\n    //                 <>\r\n    //                     <Point \r\n    //                         point={point} \r\n    //                         onChangeColor={ChangeColor()}\r\n    //                         // onClick={onClick}\r\n    //                     />\r\n    //                 </>\r\n    //             )\r\n    //         })}\r\n    //     </>\r\n    // )\r\n}\r\n\r\nexport default Points\r\n","import {useState} from \"react\"\nimport Points from \"./components/Points\"\n\nfunction App() {\n    const [mouseBound, setMouseBound]=useState([\n        {   mouseDown: false,\n            start:{\n                x:0, \n                y:0\n            },\n            end:{\n                x:0, \n                y:0\n            }\n        }\n    ]);\n    const [dragIs, setDragIs] = useState([\n        {   // While not being dragged, [pointerOffset, currentXY, offset] stores the same value, the X and Y coordinate from the original position (0,0), (used in transform: translate3D(X, Y, 0))\n            // While being dragged, \n            //      pointerOffset[X, Y] stores the pointerOffset X and Y offset of the pointer to the anchor of dragItem\n            //      currentXY[X, Y] stores the total X and Y offsets from the pointerOffset position (0,0).\n            // After a drag event, all [pointerOffset, currentXY, offset] stores the same value, the X and Y coordinate from the original position (0,0); again. \n            ref: null,\n            active: false,\n            colour: \"#f5e663\",\n            showPicker: false,\n            pointerOffset: {x:0, y:0},\n            currentXY: {x:50, y:50},\n            size: [0,0]\n        }\n    ])\n    const addDragItem = ()=>{\n        const newDragItem={\n            ref: null,\n            active: false,\n            colour: \"#f5e663\",\n            showPicker: false,\n            pointerOffset: {x:0, y:0},\n            currentXY: {x:50, y:50},\n            size: [0,0]\n        }\n        setDragIs([...dragIs, newDragItem])\n    }\n    const removeDragItem = ({index})=>{\n        if (index === -1){\n            index = dragIs.length-1\n        }\n        console.log(\"Removing point with key \"+index)\n        let newDragIs = dragIs\n        newDragIs.splice(index, 1)\n        setDragIs([...newDragIs])\n        console.log(\"New points are \", dragIs)\n    }\n    const dragStart = (e)=>{\n        // mouseDown is to capture off location drags that go over inactive point\n        mouseBound.mouseDown = true;\n        setMouseBound(mouseBound)\n        // capturing target since touch and mouse output different e.target\n        var target\n        if (e.type.substr(0,5) === \"touch\"){\n                target = document.elementFromPoint(e.touches[0].clientX, e.touches[0].clientY)\n        }else{\n                target = e.target\n        }\n        if(target.classList.contains(\"dragItem\")){\n            // console.log(\"Target is\",target)\n            var index\n            for(let i in dragIs){\n                if(dragIs[i].ref.current === target){\n                    console.log(\"now \"+ i)\n                    index = i\n                }\n            }\n            // console.log(dragIs[index])     \n            console.log(\"dragStart \"+index, dragIs[index])\n            // setting pointerOffset values at the start of a drag \n            let clientXY = {x:0, y:0}\n            if (e.type.substr(0,5) === \"touch\") {\n                clientXY = {x: e.touches[0].clientX, y: e.touches[0].clientY}\n            } else {\n                clientXY = {x: e.clientX, y: e.clientY}\n            }\n            mouseBound.start = clientXY\n            mouseBound.end = clientXY\n            setMouseBound(mouseBound)\n            console.log(\"Setting mouseStart\", mouseBound.start)\n            dragIs[index].pointerOffset.x = clientXY.x - dragIs[index].currentXY.x\n            dragIs[index].pointerOffset.y = clientXY.y - dragIs[index].currentXY.y\n            // console.log(\"dragStart \", dragIs[index].object.getBoundingClientRect().left, dragIs[index].object.getBoundingClientRect().top)\n            // console.log(\"dragStart initX, initY = [\" + [dragIs[index].pointerOffset[0], dragIs[index].pointerOffset[1]] + \"]\")\n            dragIs[index].active = true\n            dragIs[index].ref.current.classList.add(\"active\")\n            dragIs[index].ref.current.parentNode.style.zIndex = 1\n            // console.log(\"Now dragIs[index] is\", dragIs[index])\n            setDragIs([...dragIs])\n        }\n    }\n    const drag = (e)=>{\n        if(isAnyAcive()){\n            var index\n            for(let i in dragIs){\n                if(dragIs[i].active){\n                    index = i\n                }\n            }\n            // console.log(\"Pushing...\")\n            e.preventDefault();\n\n            // Calculating current XY \n            let clientXY = {x:0, y:0}\n            if (e.type.substr(0,5) === \"touch\") {\n                clientXY = {x: e.touches[0].clientX, y: e.touches[0].clientY}\n            } else {\n                clientXY = {x: e.clientX, y: e.clientY}\n            }\n            mouseBound.end = clientXY\n            setMouseBound(mouseBound)\n            if(!isClick(mouseBound.start, mouseBound.end)){\n                onPicker(dragIs[index], false)\n            }\n            dragIs[index].currentXY.x = clientXY.x - dragIs[index].pointerOffset.x\n            dragIs[index].currentXY.y = clientXY.y - dragIs[index].pointerOffset.y\n            \n            let boundXY = [[dragIs[index].ref.current.parentNode.parentNode.getBoundingClientRect().left, \n                            dragIs[index].ref.current.parentNode.parentNode.getBoundingClientRect().top\n                            ],\n                            [0,0]]\n            boundXY[1] = [boundXY[0][0]+dragIs[index].ref.current.parentNode.parentNode.clientWidth-dragIs[index].size[0], \n                            boundXY[0][1]+dragIs[index].ref.current.parentNode.parentNode.clientHeight-dragIs[index].size[1]]\n            // console.log(\"boundXY is\", boundXY);\n            dragIs[index].currentXY.x = Math.max(Math.min(dragIs[index].currentXY.x, boundXY[1][0]), boundXY[0][0])\n            dragIs[index].currentXY.y = Math.max(Math.min(dragIs[index].currentXY.y, boundXY[1][1]), boundXY[0][1])\n            dragIs[index].ref.current.parentNode.style.left = dragIs[index].currentXY.x\n            dragIs[index].ref.current.parentNode.style.top = dragIs[index].currentXY.y\n            // console.log(\"dragIs[index] is\", dragIs[index])\n            \n            setDragIs([...dragIs])\n\n        }else if(mouseBound.mouseDown){\n            dragStart(e)\n        }\n    }\n    const dragEnd = (e)=>{\n        mouseBound.mouseDown = false;\n        setMouseBound(mouseBound)\n        var index\n        for(let i in dragIs) \n            if(dragIs[i].active)\n                index = i\n        if(index){\n            dragIs[index].pointerOffset.x = dragIs[index].currentXY.x;\n            dragIs[index].pointerOffset.y = dragIs[index].currentXY.y;\n            dragIs[index].ref.current.classList.remove(\"active\")\n            dragIs[index].active = false;\n            \n            // console.log(\"mouseStart\", mouseBound.start)\n            // console.log(\"mouseEnd\", mouseBound.end)\n            console.log(e, dragIs[index].showPicker)\n            if(isClick(mouseBound.start, mouseBound.end) && !dragIs[index].showPicker){\n                dragIs[index].ref.current.classList.add(\"active\")\n                dragIs[index].ref.current.parentNode.style.zIndex = 1;\n                onPicker(dragIs[index], true)\n            }\n            else{\n                onPicker(dragIs[index], false)\n                dragIs[index].ref.current.parentNode.style.zIndex = 0;\n            }\n\n            console.log(\"dragEnd \"+index, dragIs[index])\n            setDragIs([...dragIs])\n        }\n    }\n    const isAnyAcive=()=>{\n        let active = false;\n        for (let i in dragIs){\n            active = active || dragIs[i].active; \n        }\n        return active;\n    }\n    const isPickerShowing=()=>{\n        let showPicker = false;\n        for (let i in dragIs){\n            showPicker = showPicker || dragIs[i].showPicker; \n        }\n        return showPicker;\n    }\n    const onPicker=(point, state)=>{\n        // if(state)\n        //     point.showPicker = !point.showPicker\n        // else\n            point.showPicker = state\n    }\n    const isClick=(startXY, endXY)=>{\n        let tol=10\n        let value = Math.sqrt(Math.pow(endXY.x-startXY.x,2) + Math.pow(endXY.y-startXY.y,2))\n        return (value<=tol)\n    }\n    return (\n        <div className=\"App\" \n            // onTouchStart={(e)=>dragStart(e)} \n            // onMouseDown={(e)=>dragStart(e)}\n            // onTouchMove={(e)=>drag(e)} \n            // onMouseMove={(e)=>drag(e)}\n            // onTouchEnd={(e)=>dragEnd(e)} \n            // onMouseUp={(e)=>dragEnd(e)}\n\n            onPointerDown={(e)=>dragStart(e)} \n            onPointerMove={(e)=>drag(e)} \n            onPointerUp={(e)=>dragEnd(e)} \n        >\n            <div id=\"outerContainer\">\n                <div id=\"dragPalette\">\n                    {/* <Points points={dragIs} onClick={onPicker}/> */}\n                    <Points points={dragIs}/>\n                </div>\n                <div id=\"point-manager\">\n                        <button className=\"button plus\" onClick={addDragItem}></button>\n                        <button className=\"button minus\" onClick={()=> removeDragItem({index: -1})}></button>\n                </div>\n                </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './css/style.css';\nimport './css/dragPalette.css';\nimport './css/pointManager.css';\nimport App from './App';\n// import dragHandle from './js/dragHandler';\nimport reportWebVitals from './reportWebVitals';\n\n// var dragIs;\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n// dragIs = dragHandle();"],"sourceRoot":""}