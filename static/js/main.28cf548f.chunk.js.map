{"version":3,"sources":["components/Point.js","components/Points.js","js/webglUtils.js","js/gradientRenderer.js","components/Canvas.js","App.js","reportWebVitals.js","index.js"],"names":["Point","colour","points","onChangeColor","index","onPickerButton","hex","styles","reactCSS","default","container","left","currentXY","x","top","y","pointContainer","display","justifyContent","alignItems","height","width","flexWrap","point_unclicked","backgroundColor","cursor","borderWidth","point_clicked","radius","tags","showRadius","transition","resizing","pickerButton","clicked","fontSize","transform","color","pickerBar","position","pointRef","useRef","containerRef","className","style","ref","onClick","e","id","active","showPicker","onChange","disableAlpha","presetColors","defaultProps","Points","onRender","useEffect","i","push","WebGLDebugUtil","require","error","msg","console","log","errorRE","addLineNumbersWithError","src","matches","matchAll","lineNoToErrorMap","Map","map","m","ndx","lineNo","parseInt","next","end","length","substring","split","line","err","get","join","loadShader","gl","shaderSource","shaderType","opt_errorCallback","errFn","shader","createShader","compileShader","getShaderParameter","COMPILE_STATUS","lastError","getShaderInfoLog","deleteShader","createProgram","shaders","opt_attribs","opt_locations","program","forEach","attachShader","attrib","bindAttribLocation","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","getShaderSource","type","SHADER_TYPE","glEnumToString","deleteProgram","defaultShaderType","createProgramFromSources","shaderSources","ii","renderGradient","canvas","getContext","offsetWidth","offsetHeight","locations","getAttribLocation","resolution","getUniformLocation","pointsRadius","pointsXY","pointsRGB","pointsHSV","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","positions","bufferData","Float32Array","STATIC_DRAW","vao","createVertexArray","bindVertexArray","enableVertexAttribArray","FLOAT","offset","vertexAttribPointer","multiplier","clientWidth","clientHeight","resizeCanvasToDisplaySize","viewport","useProgram","rgb","r","g","b","hsv","h","s","v","uniform1fv","flat","uniform2iv","uniform3fv","uniform2f","primType","TRIANGLES","count","drawArrays","worker","window","Worker","Canvas","canvasPoints","useState","setPoints","draw","imageData","current","putImageData","requestAnimationFrame","shootPixel","createImageData","imDataLength","data","terminate","postMessage","onerror","onmessage","alert","App","down","status","undefined","obj","mode","start","target","initialPosition","initialRadius","pos","middle","mouse","setMouse","rgbToHslHsvHex","M","C","hue","V","L","rgbArr","Math","max","min","a","hsl","abs","l","colorcode","floor","toString","repeat","defaultColour","random","size","containerSize","dragIs","setDragIs","hsvRgbObjToArr","arr","setCanvasPoints","dragStart","substr","touches","clientX","clientY","document","elementFromPoint","getIndex","classList","contains","closePoint","init","zIndex","pointCentre","getBounds","boundXY","parentNode","dist","p1","p2","sqrt","pow","isClick","startXY","endXY","set","Array","colourArr","getCanvasPoints","onPointerDown","onPointerMove","preventDefault","drag","onPointerUp","dragEnd","update","newDragIs","newDragItem","pointerOffset","splice","removeDragItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.28cf548f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport reactCSS from \"reactcss\";\r\nimport { useRef } from \"react\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { FaTint } from \"react-icons/fa\";\r\n\r\nconst Point = ({ points, onChangeColor, index, onPickerButton }) => {\r\n    var colour;\r\n    if (points[index].colour.hex) {\r\n        colour = points[index].colour.hex;\r\n    } else {\r\n        colour = points[index].colour;\r\n    }\r\n    const styles = reactCSS({\r\n        default: {\r\n            container: {\r\n                left: points[index].currentXY.x,\r\n                top: points[index].currentXY.y,\r\n            },\r\n            pointContainer: {\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                height: \"36px\",\r\n                width: \"36px\",\r\n                flexWrap: \"nowrap\",\r\n            },\r\n            point_unclicked: {\r\n                backgroundColor: colour,\r\n                \":hover\": {\r\n                    width: \"35px\",\r\n                    height: \"35px\",\r\n                    cursor: \"pointer\",\r\n                    borderWidth: \"8px\",\r\n                },\r\n            },\r\n            point_clicked: { backgroundColor: colour },\r\n            radius: {\r\n                width: points[index].tags?.showRadius\r\n                    ? 2 * points[index].radius + 50 + \"px\"\r\n                    : \"0px\",\r\n                height: points[index].tags?.showRadius\r\n                    ? 2 * points[index].radius + 50 + \"px\"\r\n                    : \"0px\",\r\n                transition: points[index].tags?.resizing\r\n                    ? \"all 0s cubic-bezier(0.39, 0.58, 0.57, 1)\"\r\n                    : \"all 0.3s cubic-bezier(0.39, 0.58, 0.57, 1)\",\r\n            },\r\n            pickerButton: {\r\n                width: points[index].tags?.clicked ? 30 + \"px\" : \"0px\",\r\n                height: points[index].tags?.clicked ? 30 + \"px\" : \"0px\",\r\n                fontSize: 30 / 2.5 + \"pt\",\r\n                transform: points[index].tags?.clicked\r\n                    ? points[index].tags?.showRadius\r\n                        ? `translate(-50%, calc(-150% - ${\r\n                              points[index].radius + 25\r\n                          }px))`\r\n                        : `translate(-50%, -200%)`\r\n                    : \"translate(-50%, -50%)\",\r\n                transition: points[index].tags?.resizing\r\n                    ? \"all 0s cubic-bezier(0.39, 0.58, 0.57, 1)\"\r\n                    : \"all 0.3s cubic-bezier(0.39, 0.58, 0.57, 1)\",\r\n                color: colour,\r\n            },\r\n            pickerBar: {\r\n                position: \"fixed\",\r\n                transform: `translate(calc(-50% + 18px), calc(2px+${\r\n                    points[index].radius + 25\r\n                }))`,\r\n            },\r\n        },\r\n    });\r\n    points[index].pointRef = useRef();\r\n    points[index].containerRef = useRef();\r\n    return (\r\n        <div\r\n            className=\"dragIContainer\"\r\n            style={styles.container}\r\n            ref={points[index].containerRef}\r\n        >\r\n            {/* point container */}\r\n            <div style={styles.pointContainer}>\r\n                <div>\r\n                    <div\r\n                        className=\"dragColor\"\r\n                        style={styles.pickerButton}\r\n                        onClick={(e) => onPickerButton(index)}\r\n                    >\r\n                        <FaTint />\r\n                    </div>\r\n                    <div\r\n                        // ref={points[index].pointRef}\r\n                        style={styles.radius}\r\n                        className=\"dragIWeight\"\r\n                        id={points[index].id}\r\n                    />\r\n                    <div\r\n                        ref={points[index].pointRef}\r\n                        style={styles.point_unclicked}\r\n                        className={\r\n                            \"dragItem\" +\r\n                            (points[index].tags &&\r\n                            (points[index].tags.active ||\r\n                                points[index].tags.clicked)\r\n                                ? \" active\"\r\n                                : \"\")\r\n                        }\r\n                        id={points[index].id}\r\n                    />\r\n                </div>\r\n            </div>\r\n            {/* Color picker */}\r\n            {points[index].tags && points[index].tags.showPicker && (\r\n                <SketchPicker\r\n                    style={styles.pickerBar}\r\n                    color={colour}\r\n                    onChange={(color) => onChangeColor(index, color)}\r\n                    disableAlpha={true}\r\n                    presetColors={[]}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\nPoint.defaultProps = {\r\n    className: \"dragItem\",\r\n};\r\n\r\nexport default Point;\r\n","import React from \"react\";\r\nimport Point from \"./Point\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst Points = ({ points, onChangeColor, onRender, onPickerButton }) => {\r\n    useEffect(() => {\r\n        onRender();\r\n    });\r\n    var Points = [];\r\n    for (let i in points) {\r\n        Points.push(\r\n            <Point\r\n                points={points}\r\n                index={i}\r\n                onChangeColor={onChangeColor}\r\n                onPickerButton={onPickerButton}\r\n            />\r\n        );\r\n    }\r\n    return Points;\r\n};\r\n\r\nexport default Points;\r\n","/*\r\n * Copyright 2021, GFXFundamentals.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are\r\n * met:\r\n *\r\n *     * Redistributions of source code must retain the above copyright\r\n * notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above\r\n * copyright notice, this list of conditions and the following disclaimer\r\n * in the documentation and/or other materials provided with the\r\n * distribution.\r\n *     * Neither the name of GFXFundamentals. nor the names of his\r\n * contributors may be used to endorse or promote products derived from\r\n * this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nvar WebGLDebugUtil = require(\"webgl-debug\");\r\n\r\n/* global define */\r\n\r\n/**\r\n * Wrapped logging function.\r\n * @param {string} msg The message to log.\r\n */\r\nfunction error(msg) {\r\n    if (console) {\r\n        if (console.error) {\r\n            console.error(msg);\r\n        } else if (console.log) {\r\n            console.log(msg);\r\n        }\r\n    }\r\n}\r\n\r\nconst errorRE = /ERROR:\\s*\\d+:(\\d+)/gi;\r\nfunction addLineNumbersWithError(src, log = \"\") {\r\n    // Note: Error message formats are not defined by any spec so this may or may not work.\r\n    const matches = [...log.matchAll(errorRE)];\r\n    const lineNoToErrorMap = new Map(\r\n        matches.map((m, ndx) => {\r\n            const lineNo = parseInt(m[1]);\r\n            const next = matches[ndx + 1];\r\n            const end = next ? next.index : log.length;\r\n            const msg = log.substring(m.index, end);\r\n            return [lineNo - 1, msg];\r\n        })\r\n    );\r\n    return src\r\n        .split(\"\\n\")\r\n        .map((line, lineNo) => {\r\n            const err = lineNoToErrorMap.get(lineNo);\r\n            return `${lineNo + 1}: ${line}${err ? `\\n\\n^^^ ${err}` : \"\"}`;\r\n        })\r\n        .join(\"\\n\");\r\n}\r\n\r\n/**\r\n * Error Callback\r\n * @callback ErrorCallback\r\n * @param {string} msg error message.\r\n * @memberOf module:webgl-utils\r\n */\r\n\r\n/**\r\n * Loads a shader.\r\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\r\n * @param {string} shaderSource The shader source.\r\n * @param {number} shaderType The type of shader.\r\n * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors.\r\n * @return {WebGLShader} The created shader.\r\n */\r\nfunction loadShader(gl, shaderSource, shaderType, opt_errorCallback) {\r\n    const errFn = opt_errorCallback || error;\r\n    // Create the shader object\r\n    const shader = gl.createShader(shaderType);\r\n\r\n    // Load the shader source\r\n    gl.shaderSource(shader, shaderSource);\r\n\r\n    // Compile the shader\r\n    gl.compileShader(shader);\r\n\r\n    // Check the compile status\r\n    const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    if (!compiled) {\r\n        // Something went wrong during compilation; get the error\r\n        const lastError = gl.getShaderInfoLog(shader);\r\n        errFn(\r\n            `Error compiling shader: ${lastError}\\n${addLineNumbersWithError(\r\n                shaderSource,\r\n                lastError\r\n            )}`\r\n        );\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n\r\n    return shader;\r\n}\r\n\r\n/**\r\n * Creates a program, attaches shaders, binds attrib locations, links the\r\n * program and calls useProgram.\r\n * @param {WebGLShader[]} shaders The shaders to attach\r\n * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in\r\n * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\r\n * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console\r\n *        on error. If you want something else pass an callback. It's passed an error message.\r\n * @memberOf module:webgl-utils\r\n */\r\nfunction createProgram(\r\n    gl,\r\n    shaders,\r\n    opt_attribs,\r\n    opt_locations,\r\n    opt_errorCallback\r\n) {\r\n    const errFn = opt_errorCallback || error;\r\n    const program = gl.createProgram();\r\n    shaders.forEach(function (shader) {\r\n        gl.attachShader(program, shader);\r\n    });\r\n    if (opt_attribs) {\r\n        opt_attribs.forEach(function (attrib, ndx) {\r\n            gl.bindAttribLocation(\r\n                program,\r\n                opt_locations ? opt_locations[ndx] : ndx,\r\n                attrib\r\n            );\r\n        });\r\n    }\r\n    gl.linkProgram(program);\r\n\r\n    // Check the link status\r\n    const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n    if (!linked) {\r\n        // something went wrong with the link\r\n        const lastError = gl.getProgramInfoLog(program);\r\n        errFn(\r\n            `Error in program linking: ${lastError}\\n${shaders\r\n                .map((shader) => {\r\n                    const src = addLineNumbersWithError(\r\n                        gl.getShaderSource(shader)\r\n                    );\r\n                    const type = gl.getShaderParameter(shader, gl.SHADER_TYPE);\r\n                    return `${WebGLDebugUtil.glEnumToString(\r\n                        gl,\r\n                        type\r\n                    )}:\\n${src}`;\r\n                })\r\n                .join(\"\\n\")}`\r\n        );\r\n\r\n        gl.deleteProgram(program);\r\n        return null;\r\n    }\r\n    return program;\r\n}\r\n\r\n/**\r\n * Loads a shader from a script tag.\r\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\r\n * @param {string} scriptId The id of the script tag.\r\n * @param {number} opt_shaderType The type of shader. If not passed in it will\r\n *     be derived from the type of the script tag.\r\n * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors.\r\n * @return {WebGLShader} The created shader.\r\n */\r\nfunction createShaderFromScript(\r\n    gl,\r\n    scriptId,\r\n    opt_shaderType,\r\n    opt_errorCallback\r\n) {\r\n    let shaderSource = \"\";\r\n    let shaderType;\r\n    const shaderScript = document.getElementById(scriptId);\r\n    if (!shaderScript) {\r\n        throw \"*** Error: unknown script element\" + scriptId;\r\n    }\r\n    shaderSource = shaderScript.text;\r\n\r\n    if (!opt_shaderType) {\r\n        if (shaderScript.type === \"x-shader/x-vertex\") {\r\n            shaderType = gl.VERTEX_SHADER;\r\n        } else if (shaderScript.type === \"x-shader/x-fragment\") {\r\n            shaderType = gl.FRAGMENT_SHADER;\r\n        } else if (\r\n            shaderType !== gl.VERTEX_SHADER &&\r\n            shaderType !== gl.FRAGMENT_SHADER\r\n        ) {\r\n            throw \"*** Error: unknown shader type\";\r\n        }\r\n    }\r\n\r\n    return loadShader(\r\n        gl,\r\n        shaderSource,\r\n        opt_shaderType ? opt_shaderType : shaderType,\r\n        opt_errorCallback\r\n    );\r\n}\r\n\r\nconst defaultShaderType = [\"VERTEX_SHADER\", \"FRAGMENT_SHADER\"];\r\n\r\n/**\r\n * Creates a program from 2 script tags.\r\n *\r\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\r\n *        to use.\r\n * @param {string[]} shaderScriptIds Array of ids of the script\r\n *        tags for the shaders. The first is assumed to be the\r\n *        vertex shader, the second the fragment shader.\r\n * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in\r\n * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\r\n * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console\r\n *        on error. If you want something else pass an callback. It's passed an error message.\r\n * @return {WebGLProgram} The created program.\r\n * @memberOf module:webgl-utils\r\n */\r\nfunction createProgramFromScripts(\r\n    gl,\r\n    shaderScriptIds,\r\n    opt_attribs,\r\n    opt_locations,\r\n    opt_errorCallback\r\n) {\r\n    const shaders = [];\r\n    for (let ii = 0; ii < shaderScriptIds.length; ++ii) {\r\n        shaders.push(\r\n            createShaderFromScript(\r\n                gl,\r\n                shaderScriptIds[ii],\r\n                gl[defaultShaderType[ii]],\r\n                opt_errorCallback\r\n            )\r\n        );\r\n    }\r\n    return createProgram(\r\n        gl,\r\n        shaders,\r\n        opt_attribs,\r\n        opt_locations,\r\n        opt_errorCallback\r\n    );\r\n}\r\n\r\n/**\r\n * Creates a program from 2 sources.\r\n *\r\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\r\n *        to use.\r\n * @param {string[]} shaderSourcess Array of sources for the\r\n *        shaders. The first is assumed to be the vertex shader,\r\n *        the second the fragment shader.\r\n * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in\r\n * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\r\n * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console\r\n *        on error. If you want something else pass an callback. It's passed an error message.\r\n * @return {WebGLProgram} The created program.\r\n * @memberOf module:webgl-utils\r\n */\r\nfunction createProgramFromSources(\r\n    gl,\r\n    shaderSources,\r\n    opt_attribs,\r\n    opt_locations,\r\n    opt_errorCallback\r\n) {\r\n    const shaders = [];\r\n    for (let ii = 0; ii < shaderSources.length; ++ii) {\r\n        shaders.push(\r\n            loadShader(\r\n                gl,\r\n                shaderSources[ii],\r\n                gl[defaultShaderType[ii]],\r\n                opt_errorCallback\r\n            )\r\n        );\r\n    }\r\n    // console.log({ shaderSources, shaders });\r\n    return createProgram(\r\n        gl,\r\n        shaders,\r\n        opt_attribs,\r\n        opt_locations,\r\n        opt_errorCallback\r\n    );\r\n}\r\n\r\n/**\r\n * Resize a canvas to match the size its displayed.\r\n * @param {HTMLCanvasElement} canvas The canvas to resize.\r\n * @param {number} [multiplier] amount to multiply by.\r\n *    Pass in window.devicePixelRatio for native pixels.\r\n * @return {boolean} true if the canvas was resized.\r\n * @memberOf module:webgl-utils\r\n */\r\nfunction resizeCanvasToDisplaySize(canvas, multiplier) {\r\n    multiplier = multiplier || 1;\r\n    const width = (canvas.clientWidth * multiplier) | 0;\r\n    const height = (canvas.clientHeight * multiplier) | 0;\r\n    if (canvas.width !== width || canvas.height !== height) {\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport { resizeCanvasToDisplaySize };\r\nexport default createProgramFromSources;\r\n","// importing boilerplate functions\r\nimport createProgramFromSources, {\r\n    resizeCanvasToDisplaySize,\r\n} from \"../js/webglUtils\";\r\n// vertex shader function that is just a function to accompany the fragment shader\r\nconst getVertexShader = () => {\r\n    const vs = `#version 300 es\r\n    in vec2 a_position;\r\n\r\n    uniform vec2 u_resolution;\r\n\r\n    out vec2 v_position;\r\n\r\n    void main(){\r\n        gl_Position = vec4(a_position/u_resolution * 2.0 - 1.0, 0, 1);\r\n        v_position = vec2(a_position.x, u_resolution.y-a_position.y);\r\n    }\r\n    `;\r\n    return vs;\r\n};\r\n// fragment shader function that returns FS with the number of points embedded in the source (length)\r\nconst getFragmentShader = (length) => {\r\n    const fs = `#version 300 es\r\n    precision highp float;\r\n\r\n    in vec2 v_position;\r\n\r\n    uniform vec2 u_resolution;\r\n    uniform ivec2 pointsXY[${length}];\r\n    uniform float pointsRadius[${length}];\r\n    uniform vec3 pointsRGB[${length}];\r\n    uniform vec3 pointsHSV[${length}];\r\n\r\n    out vec4 outColor;\r\n\r\n    vec2 minMax(vec3 rgb){\r\n        vec2 mM = vec2(rgb[0], rgb[0]);\r\n        for(int i=1;i<3;i++){\r\n            if (rgb[i] < mM[0])\r\n                mM[0] = rgb[i];\r\n            if (rgb[i] > mM[1])\r\n                mM[1] = rgb[i];\r\n        }\r\n        return mM;\r\n    }\r\n\r\n    float rgbToHue(vec3 rgb){\r\n        float hue=0.0, C;\r\n        vec2 mM = minMax(rgb);\r\n        C = mM[1] - mM[0];\r\n        if(C==0.0){\r\n        }else if(mM[1]==rgb[0]){\r\n            hue = mod((rgb[1] - rgb[2]) / C, 6.0);\r\n        }else if(mM[1]==rgb[1]){\r\n            hue =     (rgb[2] - rgb[0]) / C + 2.0;\r\n        }else if(mM[1]==rgb[2]){\r\n            hue =     (rgb[0] - rgb[1]) / C + 4.0;\r\n        }\r\n        hue = mod((mod(hue * 60.0, 360.0) + 360.0), 360.0);\r\n        return hue;\r\n    }\r\n\r\n    float f(int n, vec3 hsv){\r\n        float k;\r\n        k = mod((float(n) + hsv[0] / 60.0), 6.0);\r\n        float fOut=hsv[2] - hsv[2] * hsv[1] * max(0.0, min(min(k, 4.0 - k), 1.0));\r\n        return fOut;\r\n    }\r\n\r\n    vec3 hsvToRgb(vec3 hsv){\r\n        vec3 rgb = vec3(f(5,hsv), f(3,hsv), f(1,hsv));\r\n        return rgb;\r\n    }\r\n\r\n    float dist(ivec2 pos, ivec2 point){\r\n        return pow(pow(float(pos.x-point.x), 2.0)+pow(float(pos.y-point.y), 2.0), 0.5);\r\n    }\r\n\r\n    void main(){\r\n        // ivec2 position = ivec2((v_position + 1.0) / 2.0 * u_resolution);\r\n        ivec2 position = ivec2(v_position);\r\n        float invSum = 0.0;\r\n        vec3 hsv = vec3(0,0,0), rgb = vec3(0,0,0);\r\n        int pointCentre = -1;\r\n        for(int i=0;i<${length};i++){\r\n            float d = dist(pointsXY[i], position);\r\n            if(abs(d)>0.0000001){\r\n                // float invD = 1.0*pow(float(i+1), 1.0)/d;\r\n                // float invD = (1.0+pointsRadius[i]/10.0)/d;\r\n                float invD = (1.0+pointsRadius[i]/10.0)/d;\r\n                // invD = invD* (1.0+pointsRadius[i]/10.0);\r\n                // invD = pow(1.0/d, (1.0+pointsRadius[i]/10.0));\r\n                hsv += invD * pointsHSV[i];\r\n                rgb += invD * pointsRGB[i];\r\n                invSum += invD;\r\n            }else{\r\n                pointCentre=i;\r\n            }\r\n        }\r\n        if(pointCentre == -1){\r\n            hsv = hsv/invSum;\r\n            rgb = rgb/invSum;\r\n            hsv[0] = rgbToHue(rgb);\r\n            outColor = vec4(hsvToRgb(hsv),1);\r\n        }else{\r\n            hsv = pointsHSV[pointCentre];\r\n            rgb = pointsRGB[pointCentre];\r\n            outColor = vec4(rgb, 1);\r\n        }\r\n    }\r\n\r\n    `;\r\n    return fs;\r\n};\r\nconst renderGradient = (points, canvas) => {\r\n    if (points && points.length > 0) {\r\n        // accessing WebGL2 context from canvas\r\n        const gl = canvas.getContext(\"webgl2\");\r\n\r\n        // resizing canvas context to canvas width set by CSS\r\n        canvas.width = canvas.offsetWidth;\r\n        canvas.height = canvas.offsetHeight;\r\n\r\n        // creating program using the vs and fs functions above\r\n        const program = createProgramFromSources(gl, [\r\n            getVertexShader(),\r\n            getFragmentShader(points.length),\r\n        ]);\r\n\r\n        // storing locations of attributes and uniforms (state variables)\r\n        const locations = {\r\n            position: gl.getAttribLocation(program, \"a_position\"),\r\n            resolution: gl.getUniformLocation(program, \"u_resolution\"),\r\n            pointsRadius: gl.getUniformLocation(program, \"pointsRadius\"),\r\n            pointsXY: gl.getUniformLocation(program, \"pointsXY\"),\r\n            pointsRGB: gl.getUniformLocation(program, \"pointsRGB\"),\r\n            pointsHSV: gl.getUniformLocation(program, \"pointsHSV\"),\r\n        };\r\n\r\n        // creating a position buffer to load the entire clipspace into webgl buffer\r\n        var positionBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n\r\n        // clipspace is formed using two (anticlockwise) triangles\r\n        // prettier-ignore\r\n        var positions = [\r\n                   0, canvas.height, \r\n        canvas.width, 0, \r\n        canvas.width, canvas.height, \r\n                   0, 0, \r\n        canvas.width, 0, \r\n                   0, canvas.height\r\n    ];\r\n        // loading positions array to graphics buffer\r\n        gl.bufferData(\r\n            gl.ARRAY_BUFFER,\r\n            new Float32Array(positions),\r\n            gl.STATIC_DRAW\r\n        );\r\n\r\n        // creating vertex array object that will attach the positionBuffer to the attributes\r\n        var vao = gl.createVertexArray();\r\n        // binding current vertex array to vao\r\n        gl.bindVertexArray(vao);\r\n        // connecting vao to a_position attribute\r\n        gl.enableVertexAttribArray(locations.position);\r\n        // Tell the attribute how to get data out of positionBuffer (ARRAY_BUFFER)\r\n        var size = 2; // 2 components per iteration (x, y)\r\n        var type = gl.FLOAT; // the data is 32bit floats\r\n        var normalize = false; // don't normalize the data\r\n        var stride = 0; // 0 = move forward size * sizeof(type) each iteration to get the next position (consecutive elemets)\r\n        var offset = 0; // start at the beginning of the buffer\r\n        // attach vao to the current ARRAY_BUFFER (positionBuffer) and pass instructions on how to interpret the data\r\n        gl.vertexAttribPointer(\r\n            locations.position,\r\n            size,\r\n            type,\r\n            normalize,\r\n            stride,\r\n            offset\r\n        );\r\n\r\n        // resizing canvas to fit the fill clipspace - not sure why since we already did canvas.width = offsetWidth and all...\r\n        resizeCanvasToDisplaySize(gl.canvas);\r\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n\r\n        // Telling WebGL to use our program (with the pair of shaders)\r\n        gl.useProgram(program);\r\n\r\n        // generating arrays that will be sent to uniforms\r\n        const pointsRadius = points.map(({ radius }) => {\r\n            return radius;\r\n        });\r\n        // console.log(pointsRadius.flat());\r\n        const pointsXY = points.map(({ x, y }) => {\r\n            return [x, y];\r\n        });\r\n        const pointsRGB = points.map(({ colour }) => {\r\n            return [colour.rgb.r / 255, colour.rgb.g / 255, colour.rgb.b / 255];\r\n        });\r\n        const pointsHSV = points.map(({ colour }) => {\r\n            return [colour.hsv.h / 360, colour.hsv.s, colour.hsv.v];\r\n        });\r\n        // setting uniforms\r\n        gl.uniform1fv(locations.pointsRadius, pointsRadius.flat());\r\n        gl.uniform2iv(locations.pointsXY, pointsXY.flat());\r\n        gl.uniform3fv(locations.pointsRGB, pointsRGB.flat());\r\n        gl.uniform3fv(locations.pointsHSV, pointsHSV.flat());\r\n        gl.uniform2f(locations.resolution, canvas.width, canvas.height);\r\n\r\n        // drawwwww\r\n        var primType = gl.TRIANGLES;\r\n        offset = 0;\r\n        var count = positions.length / size;\r\n        gl.drawArrays(primType, offset, count);\r\n        // requestAnimationFrame(renderGradient);\r\n\r\n        // simply reading the data\r\n        // var results = new Uint8Array(canvas.width * canvas.height * 4);\r\n        // gl.readPixels(\r\n        //     0,\r\n        //     0,\r\n        //     canvas.width,\r\n        //     canvas.height,\r\n        //     gl.RGBA,\r\n        //     gl.UNSIGNED_BYTE,\r\n        //     results\r\n        // );\r\n        // var resultsB = [];\r\n        // for (let i = 0; i < canvas.width * canvas.height; i++) {\r\n        //     resultsB.push({\r\n        //         r: results[4 * i],\r\n        //         g: results[4 * i + 1],\r\n        //         b: results[4 * i + 2],\r\n        //         a: results[4 * i + 3],\r\n        //     });\r\n        // }\r\n        // console.log({ results, resultsB });\r\n    }\r\n};\r\n\r\nexport default renderGradient;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport renderGradient from \"../js/gradientRenderer\";\r\n\r\nvar worker = new window.Worker(\"./gradientWorker.js\");\r\n\r\nconst Canvas = ({ id, canvasPoints }) => {\r\n    const [points, setPoints] = useState(canvasPoints);\r\n    const [canvas] = useState(useRef(null));\r\n    const draw = (imageData) => {\r\n        var ctx = canvas.current.getContext(\"2d\");\r\n        ctx.putImageData(imageData, 0, 0);\r\n        window.requestAnimationFrame(() => draw(imageData));\r\n    };\r\n    const shootPixel = () => {\r\n        // canvas.current.width = canvas.current.offsetWidth;\r\n        // canvas.current.height = canvas.current.offsetHeight;\r\n        if (!canvas.current.getContext(\"webgl2\")) {\r\n            console.log(\"WebGL2 not available, using CPU.\");\r\n            var ctx = canvas.current.getContext(\"2d\");\r\n            const imageData = ctx.createImageData(\r\n                canvas.current.width,\r\n                canvas.current.height\r\n            );\r\n            var imDataLength = imageData.data.length;\r\n            // Calling worker\r\n            worker.terminate();\r\n            worker = new window.Worker(\"./gradientWorker.js\");\r\n            worker.postMessage({\r\n                imageData: imageData,\r\n                points: points,\r\n                canvas: {\r\n                    width: canvas.current.width,\r\n                    height: canvas.current.height,\r\n                },\r\n            });\r\n            worker.onerror = (err) => {\r\n                console.log(\"error\", err);\r\n            };\r\n            worker.onmessage = (e) => {\r\n                if (imDataLength === e.data.imageData.data.length) {\r\n                    // var t0 = Date.now();\r\n                    window.requestAnimationFrame(() => draw(e.data.imageData));\r\n                    // var t1 = Date.now() - t0;\r\n                    // console.log(\"drawing time \" + t1 + \"ms\");\r\n                }\r\n            };\r\n        } else {\r\n            // var t0 = Date.now();\r\n            window.requestAnimationFrame(() =>\r\n                renderGradient(points, canvas.current)\r\n            );\r\n            // var t1 = Date.now() - t0;\r\n            // console.log(\"GPU drawing time \" + t1 + \"ms\");\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        setPoints(canvasPoints);\r\n        shootPixel();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    });\r\n    useEffect(() => {\r\n        if (!canvas.current.getContext(\"webgl2\")) {\r\n            alert(\r\n                \"WebGL not available in this browser/platform. Renders may be slower.\"\r\n            );\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n    return <canvas id={id} ref={canvas} />;\r\n};\r\n\r\nexport default Canvas;\r\n","import { useState, useEffect } from \"react\";\r\nimport Points from \"./components/Points\";\r\nimport Canvas from \"./components/Canvas\";\r\nimport { FaPlus, FaMinus } from \"react-icons/fa\";\r\n\r\nfunction App() {\r\n    const [mouse, setMouse] = useState({\r\n        down: false,\r\n        clicked: {\r\n            status: false,\r\n            index: undefined,\r\n            obj: undefined,\r\n        },\r\n        active: false,\r\n        resizing: {\r\n            mode: false,\r\n            start: false,\r\n        },\r\n        target: {\r\n            obj: undefined,\r\n            index: undefined,\r\n            initialPosition: {\r\n                x: 0,\r\n                y: 0,\r\n            },\r\n            initialRadius: undefined,\r\n        },\r\n        pos: {\r\n            start: {\r\n                x: 0,\r\n                y: 0,\r\n            },\r\n            middle: {\r\n                x: 0,\r\n                y: 0,\r\n            },\r\n            end: {\r\n                x: 0,\r\n                y: 0,\r\n            },\r\n        },\r\n    });\r\n    const rgbToHslHsvHex = (rgb) => {\r\n        var rgbArr = [rgb.r, rgb.g, rgb.b];\r\n        var M, m, C, hue, V, L, Sv, Sl;\r\n        M = Math.max(...rgbArr);\r\n        m = Math.min(...rgbArr);\r\n        C = M - m;\r\n        // I = (rgbArr[0] + rgbArr[1] + rgbArr[2]) / 3;\r\n        // Hue\r\n        if (C === 0) hue = 0;\r\n        else if (M === rgbArr[0]) hue = ((rgbArr[1] - rgbArr[2]) / C) % 6;\r\n        else if (M === rgbArr[1]) hue = (rgbArr[2] - rgbArr[0]) / C + 2;\r\n        else if (M === rgbArr[2]) hue = (rgbArr[0] - rgbArr[1]) / C + 4;\r\n        hue *= 60;\r\n        // Lightness and Value\r\n        V = M / 255;\r\n        L = (M + m) / (2 * 255);\r\n        // Saturation\r\n        if (V === 0) Sv = 0;\r\n        else Sv = C / (V * 255);\r\n        if (L === 1 || L === 0) Sl = 0;\r\n        else Sl = C / (255 * (1 - Math.abs(2 * L - 1)));\r\n\r\n        hue = ((hue % 360) + 360) % 360;\r\n        // L = (L % 1 + 1)%1\r\n        // V = (V % 1 + 1)%1\r\n        // Sv = (Sv % 1 + 1)%1\r\n        // Sl = (Sl % 1 + 1)%1\r\n        let hsv = { h: hue, s: Sv, v: V, a: 1 };\r\n        let hsl = { h: hue, s: Sl, l: L, a: 1 };\r\n        rgb.a = 1;\r\n        let hex = \"#\";\r\n        for (let i in rgbArr) {\r\n            let colorcode = Math.floor(rgbArr[i]).toString(16);\r\n            hex += \"0\".repeat(2 - colorcode.length) + colorcode;\r\n        }\r\n        return { rgb: rgb, hsv: hsv, hsl: hsl, hex: hex };\r\n    };\r\n    var defaultColour = rgbToHslHsvHex({\r\n        r: Math.random() * 255,\r\n        g: Math.random() * 255,\r\n        b: Math.random() * 255,\r\n    });\r\n    const [dragIs, setDragIs] = useState([\r\n        {\r\n            // While not being dragged, [pointerOffset, currentXY, offset] stores the same value, the X and Y coordinate from the original position (0,0), (used in transform: translate3D(X, Y, 0))\r\n            // While being dragged,\r\n            //      pointerOffset[X, Y] stores the pointerOffset X and Y offset of the pointer to the anchor of dragItem\r\n            //      currentXY[X, Y] stores the total X and Y offsets from the pointerOffset position (0,0).\r\n            // After a drag event, all [pointerOffset, currentXY, offset] stores the same value, the X and Y coordinate from the original position (0,0); again.\r\n            pointRef: null,\r\n            containerRef: null,\r\n            radius: 0,\r\n            colour: defaultColour,\r\n            showPicker: false,\r\n            currentXY: { x: 50, y: 50 },\r\n            size: undefined,\r\n            containerSize: undefined,\r\n        },\r\n    ]);\r\n    const hsvRgbObjToArr = (obj) => {\r\n        var arr = [\r\n            [0, 0, 0],\r\n            [0, 0, 0],\r\n        ];\r\n        arr[0] = [obj.hsv.h, obj.hsv.s, obj.hsv.v];\r\n        arr[1] = [obj.rgb.r, obj.rgb.g, obj.rgb.b];\r\n        return arr;\r\n    };\r\n    const getCanvasPoints = (set) => {\r\n        let points = new Array(dragIs.length);\r\n        for (let i in dragIs) {\r\n            if (dragIs[i].size) {\r\n                points[i] = {\r\n                    x: dragIs[i].currentXY.x + dragIs[i].size[0] / 2,\r\n                    y: dragIs[i].currentXY.y + dragIs[i].size[1] / 2,\r\n                    colour: dragIs[i].colour,\r\n                    colourArr: hsvRgbObjToArr(dragIs[i].colour),\r\n                    radius: dragIs[i].radius,\r\n                };\r\n            }\r\n        }\r\n        if (set) setCanvasPoints(points);\r\n        else return points;\r\n    };\r\n    const [canvasPoints, setCanvasPoints] = useState(false);\r\n    const addDragItem = () => {\r\n        var currentXY = { x: 50, y: 50 },\r\n            colour;\r\n        if (dragIs.length > 0) {\r\n            var boundXY = [\r\n                [0, 0],\r\n                [0, 0],\r\n            ];\r\n            boundXY[1] = [\r\n                boundXY[0][0] +\r\n                    dragIs[0].containerRef.current.parentNode.clientWidth -\r\n                    dragIs[0].size[0],\r\n                boundXY[0][1] +\r\n                    dragIs[0].containerRef.current.parentNode.clientHeight -\r\n                    dragIs[0].size[1],\r\n            ];\r\n            let x, y;\r\n            x = Math.floor(Math.random() * boundXY[1][0] + boundXY[0][0]);\r\n            y = Math.floor(Math.random() * boundXY[1][1] + boundXY[0][1]);\r\n            currentXY = { x: x, y: y };\r\n        }\r\n        colour = {\r\n            r: Math.random() * 255,\r\n            g: Math.random() * 255,\r\n            b: Math.random() * 255,\r\n        };\r\n        colour = rgbToHslHsvHex(colour);\r\n        const newDragItem = {\r\n            ref: null,\r\n            containerRef: null,\r\n            radius: 0, //1 + Math.random() * 2,\r\n            colour: colour,\r\n            showPicker: false,\r\n            pointerOffset: { x: 0, y: 0 },\r\n            currentXY: currentXY,\r\n            size: undefined,\r\n            containerSize: undefined,\r\n        };\r\n        setDragIs([...dragIs, newDragItem]);\r\n    };\r\n    const removeDragItem = ({ index }) => {\r\n        if (index === -1) {\r\n            index = dragIs.length - 1;\r\n        }\r\n        console.log(\"Removing point with key \" + index);\r\n        let newDragIs = dragIs;\r\n        newDragIs.splice(index, 1);\r\n        setDragIs([...newDragIs]);\r\n        console.log(\"New points are \", dragIs);\r\n    };\r\n    const dragStart = (e) => {\r\n        // console.log(\"Hi start\");\r\n        // setting mouse elements at pointerDown\r\n        mouse.down = true;\r\n        if (e.type.substr(0, 5) === \"touch\") {\r\n            mouse.pos.start = {\r\n                x: e.touches[0].clientX,\r\n                y: e.touches[0].clientY,\r\n            };\r\n        } else {\r\n            mouse.pos.start = { x: e.clientX, y: e.clientY };\r\n        }\r\n        mouse.pos.end = mouse.pos.start; // not sure if this is needed.\r\n\r\n        mouse.target.obj = document.elementFromPoint(e.clientX, e.clientY);\r\n        var index = getIndex(mouse.target.obj);\r\n        mouse.target.index = index;\r\n        // console.log(\"target is\", mouse.target.obj);\r\n        // console.log(\"whosClicked\", whosClicked());\r\n        // console.log(\r\n        //     !mouse.clicked.status,\r\n        //     mouse.clicked.index,\r\n        //     mouse.target.index,\r\n        //     mouse.clicked.index !== mouse.target.index,\r\n        //     !mouse.clicked.status ||\r\n        //         (mouse.clicked.status &&\r\n        //             mouse.clicked.index !== mouse.target.index)\r\n        // );\r\n\r\n        // console.log(\r\n        //     mouse.clicked.status,\r\n        //     mouse.clicked.obj,\r\n        //     mouse.target.obj.parentNode.children,\r\n        //     mouse.clicked.status &&\r\n        //         (mouse.clicked.obj ===\r\n        //             mouse.target.obj.parentNode.children[0] ||\r\n        //             mouse.clicked.obj ===\r\n        //                 mouse.target.obj.parentNode.children[1])\r\n        // );\r\n        // moving point\r\n        if (\r\n            // if pointerdown on the a dragItem\r\n            mouse.target.obj.classList.contains(\"dragItem\") &&\r\n            (!mouse.clicked.status || // if none is clicked,\r\n                (mouse.clicked.status &&\r\n                    mouse.clicked.index !== mouse.target.index)) // or clicked item is not pointerdown item\r\n        ) {\r\n            // console.log(\"entering dragStart move\");\r\n            closePoint();\r\n            // console.log(mouse.target.obj);\r\n            // console.log(index);\r\n            if (index) {\r\n                mouse.target.index = index;\r\n                // console.log(\"Init XY\", dragIs[mouse.target.index].currentXY);\r\n                mouse.target.init = {\r\n                    x:\r\n                        dragIs[mouse.target.index].currentXY.x -\r\n                        mouse.pos.start.x,\r\n                    y:\r\n                        dragIs[mouse.target.index].currentXY.y -\r\n                        mouse.pos.start.y,\r\n                };\r\n                mouse.active = true;\r\n                dragIs[mouse.target.index].tags = { active: true };\r\n                // change this below\r\n                dragIs[\r\n                    mouse.target.index\r\n                ].containerRef.current.style.zIndex = 2;\r\n            }\r\n        }\r\n        // resizing point\r\n        else if (\r\n            // clicked item is pointerdown item\r\n            mouse.clicked.status &&\r\n            mouse.clicked.index === mouse.target.index &&\r\n            dragIs[mouse.clicked.index].tags?.showRadius\r\n        ) {\r\n            mouse.resizing.mode = true;\r\n            mouse.target.initialRadius = dragIs[mouse.clicked.index].radius;\r\n            console.log(\"hi resize\");\r\n        }\r\n        setDragIs([...dragIs]);\r\n        setMouse(mouse);\r\n    };\r\n    const drag = (e) => {\r\n        // mouse.target.obj = document.elementFromPoint(e.clientX, e.clientY);\r\n        if (e.type.substr(0, 5) === \"touch\") {\r\n            mouse.pos.middle = {\r\n                x: e.touches[0].clientX,\r\n                y: e.touches[0].clientY,\r\n            };\r\n        } else {\r\n            mouse.pos.middle = { x: e.clientX, y: e.clientY };\r\n        }\r\n        // console.log(mouse.pos.middle);\r\n\r\n        // if an item is active and the mouse movement is not a click, drag it\r\n        if (mouse.active && !isClick(mouse.pos.start, mouse.pos.middle)) {\r\n            // see if these are needed...\r\n            // onPointClick(index, false);\r\n            // closePickers(index);\r\n            e.preventDefault();\r\n            var index = mouse.target.index;\r\n            dragIs[index].containerRef.current.style.zIndex = 2; // bringing item to top\r\n            var currentXY = { x: 0, y: 0 }; // saving the position to a variable (used to bound...)\r\n            currentXY.x = mouse.pos.middle.x + mouse.target.init.x;\r\n            currentXY.y = mouse.pos.middle.y + mouse.target.init.y;\r\n            // finding the bounds of the dragPalette element\r\n            // this is done so that the points stay inside\r\n            // the palette even if cursor is outside\r\n            let boundXY = getBounds(index);\r\n            dragIs[index].currentXY.x = Math.max(\r\n                Math.min(currentXY.x, boundXY[1][0]),\r\n                boundXY[0][0]\r\n            );\r\n            dragIs[index].currentXY.y = Math.max(\r\n                Math.min(currentXY.y, boundXY[1][1]),\r\n                boundXY[0][1]\r\n            );\r\n        }\r\n        // resizing\r\n        else if (mouse.resizing.mode) {\r\n            console.log(\"point is at \", pointCentre(mouse.clicked.index));\r\n            let r = dist(pointCentre(mouse.clicked.index), {\r\n                x: mouse.pos.middle.x - 20,\r\n                y: mouse.pos.middle.y - 20,\r\n            });\r\n            console.log(r - 25, mouse.target.initialRadius);\r\n            if (mouse.resizing.start) {\r\n                dragIs[mouse.clicked.index].radius = Math.max(\r\n                    Math.abs(r) - 25,\r\n                    0\r\n                );\r\n                console.log(Math.abs(r), dragIs[mouse.clicked.index].radius);\r\n            } else if (r - 25 >= mouse.target.initialRadius) {\r\n                dragIs[mouse.clicked.index].tags\r\n                    ? (dragIs[mouse.clicked.index].tags.resizing = true)\r\n                    : (dragIs[mouse.clicked.index].tags = { resizing: true });\r\n                mouse.resizing.start = true;\r\n            }\r\n        } else if (mouse.down) {\r\n            dragStart(e);\r\n        }\r\n        // else if (mouseBound.clicked.status && mouseBound.resizing) {\r\n        //     let index = mouseBound.clicked.index;\r\n        //     let radiusInc = dist(mouseBound.pos.start, mouseBound.pos.middle);\r\n        //     console.log({ radiusInc });\r\n        //     dragIs[index].radius = dragIs[index].oldRadius + radiusInc;\r\n        //     setDragIs([...dragIs]);\r\n        //     // } else if (whosClicked() && dragIs[whosClicked(\"index\")].resizing) {\r\n        //     //     let radiusInc = dist(mouse.pos.start, mouse.pos.middle);\r\n        //     //     console.log({ radiusInc });\r\n        //     //     let index = whosClicked(\"index\");\r\n        //     //     dragIs[index].radius = dragIs[index].oldRadius + radiusInc;\r\n        //     //     setDragIs([...dragIs]);\r\n        //     // } else if (\r\n        //     //     mouse.pos.down &&\r\n        //     //     (!isAnyClicked() || (isAnyClicked() && whosClicked() !== target))\r\n        //     // ) {\r\n        //     //     dragStart(e);\r\n        // } else {\r\n        //     // var target = document.elementFromPoint(e.clientX, e.clientY);\r\n        //     // // console.log(target)\r\n        //     // try {\r\n        //     //     if (target.tagName === \"CANVAS\")\r\n        //     //         console.log(\r\n        //     //             target\r\n        //     //                 .getContext(\"2d\")\r\n        //     //                 .getImageData(e.clientX, e.clientY, 1, 1).data\r\n        //     //         );\r\n        //     // } catch {}\r\n        // }\r\n        setDragIs([...dragIs]);\r\n        setMouse(mouse);\r\n    };\r\n    const dragEnd = (e) => {\r\n        if (e.type.substr(0, 5) === \"touch\") {\r\n            mouse.pos.end = {\r\n                x: e.touches[0].clientX,\r\n                y: e.touches[0].clientY,\r\n            };\r\n        } else {\r\n            mouse.pos.end = { x: e.clientX, y: e.clientY };\r\n        }\r\n        let index = mouse.target.index;\r\n        // console.log(JSON.parse(JSON.stringify(mouse.active)));\r\n        let target = document.elementFromPoint(e.clientX, e.clientY);\r\n        // item is clicked, show radius\r\n        if (\r\n            isClick(mouse.pos.start, mouse.pos.end) &&\r\n            (target.classList.contains(\"dragItem\") ||\r\n                target.classList.contains(\"dragIWeight\"))\r\n        ) {\r\n            console.log(\"Hello click\");\r\n            dragIs[index].containerRef.current.style.zIndex = dragIs[index]\r\n                .clicked\r\n                ? 1\r\n                : 2;\r\n            // console.log(\"clicked\", mouse.clicked.status);\r\n            // console.log(!mouse.clicked.status);\r\n            if (\r\n                !mouse.clicked.status ||\r\n                (mouse.clicked.target && mouse.clicked.target !== target)\r\n            ) {\r\n                // console.log(\"clicking\", target);\r\n                mouse.clicked.status = true;\r\n                mouse.clicked.target = target;\r\n                mouse.clicked.index = getIndex(target);\r\n                closePoint(mouse.clicked.index);\r\n                dragIs[mouse.clicked.index].tags = {\r\n                    clicked: true,\r\n                    showRadius: true,\r\n                };\r\n            } else if (\r\n                mouse.clicked.target &&\r\n                mouse.clicked.target === target\r\n            ) {\r\n                // console.log(\"unclicking\");\r\n                mouse.clicked.status = false;\r\n                closePoint();\r\n                mouse.clicked.target = undefined;\r\n                mouse.clicked.index = undefined;\r\n            }\r\n            // onPointClick(index, !dragIs[index].clicked);\r\n        } else if (mouse.resizing.start) {\r\n            console.log(\"hello resize\");\r\n            delete dragIs[index].tags.resizing;\r\n            // dragIs[index].oldRadius = dragIs[index].radius;\r\n        } else if (mouse.active) {\r\n            console.log(\"hello active fello, go to sleep\");\r\n            closePoint();\r\n            mouse.active = false;\r\n            dragIs[index].containerRef.current.style.zIndex = 1;\r\n        }\r\n        mouse.down = false;\r\n        mouse.active = false;\r\n        mouse.resizing.mode = false;\r\n        mouse.resizing.start = false;\r\n        setDragIs([...dragIs]);\r\n        setMouse(mouse);\r\n        // console.log(\"after clicked\", mouse.clicked.status);\r\n    };\r\n    const getIndex = (obj) => {\r\n        for (let i in dragIs) {\r\n            if (dragIs[i].pointRef.current === obj) {\r\n                return i;\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n    const pointCentre = (index) => {\r\n        let centre = {\r\n            x: dragIs[index].currentXY.x + dragIs[index].containerSize[0] / 2,\r\n            y: dragIs[index].currentXY.y + dragIs[index].containerSize[1] / 2,\r\n        };\r\n        return centre;\r\n    };\r\n    const getBounds = (index) => {\r\n        let boundXY = [\r\n            [\r\n                -(dragIs[index].containerSize[0] - dragIs[index].size[0]) / 2,\r\n                -(dragIs[index].containerSize[1] - dragIs[index].size[1]) / 2,\r\n            ], // min X, Y\r\n            [0, 0], // max X, Y\r\n        ];\r\n        boundXY[1] = [\r\n            boundXY[0][0] +\r\n                dragIs[index].containerRef.current.parentNode.clientWidth -\r\n                dragIs[index].size[0], // (- size) because anchor is at top left\r\n            boundXY[0][1] +\r\n                dragIs[index].containerRef.current.parentNode.clientHeight -\r\n                dragIs[index].size[1],\r\n        ];\r\n        return boundXY;\r\n    };\r\n    const closePoint = (index = undefined) => {\r\n        !index && (mouse.clicked.status = false);\r\n        for (let i in dragIs) {\r\n            if (index === i) {\r\n                continue;\r\n            }\r\n            if (dragIs[i].tags) delete dragIs[i].tags;\r\n            dragIs[i].containerRef.current.style.zIndex = 1;\r\n        }\r\n        setDragIs(dragIs);\r\n    };\r\n    const closePickers = (index) => {\r\n        for (let i in dragIs) {\r\n            if (i !== index) {\r\n                dragIs[i].showPicker = false;\r\n                dragIs[i].containerRef.current.style.zIndex = 1;\r\n            }\r\n        }\r\n        setDragIs(dragIs);\r\n    };\r\n    const isAnyActive = () => {\r\n        let active = false;\r\n        for (let i in dragIs) {\r\n            active = active || dragIs[i].active;\r\n        }\r\n        return active;\r\n    };\r\n    const isAnyClicked = () => {\r\n        let clicked = false;\r\n        for (let i in dragIs) {\r\n            clicked = clicked || dragIs[i].clicked;\r\n        }\r\n        return clicked;\r\n    };\r\n    const whosClicked = (returnType = \"DOM\") => {\r\n        let clicked = -1;\r\n        for (let i in dragIs) {\r\n            if (dragIs[i].clicked) clicked = i;\r\n        }\r\n        // console.log(clicked);\r\n        if (clicked !== -1) {\r\n            if (returnType === \"DOM\") return dragIs[clicked].pointRef.current;\r\n            else if (returnType === \"index\") return clicked;\r\n            else if (returnType === \"full\") {\r\n                return dragIs[clicked].pointRef.current.parentNode.children;\r\n            }\r\n        } else return undefined;\r\n    };\r\n    const isPickerActive = () => {\r\n        let showPicker = false;\r\n        for (let i in dragIs) {\r\n            showPicker = showPicker || dragIs[i].showPicker;\r\n        }\r\n        return showPicker;\r\n    };\r\n    const onPointClick = (index, state) => {\r\n        dragIs[index].clicked = state;\r\n        dragIs[index].oldRadius = dragIs[index].radius;\r\n        // dragIs[index].showPicker = state;\r\n        setDragIs(dragIs);\r\n    };\r\n    const dist = (p1, p2) => {\r\n        return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\r\n    };\r\n    const isClick = (startXY, endXY) => {\r\n        let tol = 5;\r\n        let value = dist(endXY, startXY);\r\n        return value <= tol;\r\n    };\r\n    const updateSizes = () => {\r\n        let update = false;\r\n        for (let i in dragIs) {\r\n            if (!dragIs[i].size) {\r\n                update = true;\r\n                dragIs[i].size = [\r\n                    dragIs[i].pointRef.current.offsetWidth,\r\n                    dragIs[i].pointRef.current.offsetHeight,\r\n                ];\r\n                dragIs[i].containerSize = [\r\n                    dragIs[i].pointRef.current.parentNode.parentNode\r\n                        .offsetWidth,\r\n                    dragIs[i].pointRef.current.parentNode.parentNode\r\n                        .offsetHeight,\r\n                ];\r\n            }\r\n        }\r\n        if (update) setDragIs(dragIs);\r\n    };\r\n    const onChangeColor = (index, color) => {\r\n        let newDragIs = [...dragIs];\r\n        newDragIs[index].colour = color;\r\n        setDragIs([...newDragIs]);\r\n    };\r\n    const onPickerButton = (index) => {\r\n        if (dragIs[index].tags) {\r\n            if (dragIs[index].tags.showPicker) {\r\n                delete dragIs[index].tags.showPicker;\r\n                dragIs[index].tags.showRadius = true;\r\n            } else {\r\n                dragIs[index].tags.showPicker = true;\r\n                delete dragIs[index].tags.showRadius;\r\n            }\r\n        } else dragIs[index].tags = { showPicker: true };\r\n        setDragIs([...dragIs]);\r\n    };\r\n    useEffect(() => {\r\n        getCanvasPoints(true);\r\n        // console.log(\r\n        //     dragIs[0]?.pointRef.current.offsetWidth,\r\n        //     dragIs[0]?.pointRef.current.offsetHeight,\r\n        //     dragIs[0]?.pointRef.current.parentNode.parentNode.offsetWidth,\r\n        //     dragIs[0]?.pointRef.current.parentNode.parentNode.offsetHeight\r\n        // );\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [dragIs]);\r\n    useEffect(() => {\r\n        console.log(\"tT\", mouse);\r\n    }, []);\r\n    return (\r\n        <div\r\n            className=\"App\"\r\n            onPointerDown={(e) => dragStart(e)}\r\n            onPointerMove={(e) => drag(e)}\r\n            onPointerUp={(e) => dragEnd(e)}\r\n        >\r\n            <div id=\"outerContainer\">\r\n                <div id=\"dragPalette\">\r\n                    <Canvas\r\n                        id={\"gradientPalette\"}\r\n                        canvasPoints={canvasPoints}\r\n                    />\r\n                </div>\r\n                <Points\r\n                    points={dragIs}\r\n                    onRender={updateSizes}\r\n                    onChangeColor={onChangeColor}\r\n                    onPickerButton={onPickerButton}\r\n                />\r\n                <div id=\"point-manager\">\r\n                    <button className=\"button plus\" onClick={addDragItem}>\r\n                        <FaPlus />\r\n                    </button>\r\n                    <button\r\n                        className=\"button minus\"\r\n                        onClick={() => removeDragItem({ index: -1 })}\r\n                    >\r\n                        <FaMinus />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './css/style.css';\nimport './css/dragPalette.css';\nimport './css/pointManager.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}