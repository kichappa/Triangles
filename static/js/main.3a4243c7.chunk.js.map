{"version":3,"sources":["components/Point.js","components/Points.js","App.js","reportWebVitals.js","index.js"],"names":["Point","className","point","onChangeColor","useState","colour","color","setColor","styles","reactCSS","container","position","left","currentXY","x","top","y","backgroundColor","useEffect","size","ref","current","offsetWidth","offsetHeight","useRef","style","id","showPicker","onChange","hex","disableAlpha","presetColors","defaultProps","Points","points","i","push","App","mouseDown","start","end","mouseBound","setMouseBound","active","pointerOffset","dragIs","setDragIs","dragStart","e","target","document","elementFromPoint","clientX","clientY","classList","contains","index","console","log","clientXY","type","substr","touches","add","parentNode","zIndex","closePickers","remove","isAnyAcive","onPicker","state","isClick","startXY","endXY","Math","sqrt","pow","onPointerDown","onPointerMove","preventDefault","boundXY","getBoundingClientRect","clientWidth","clientHeight","max","min","drag","onPointerUp","dragEnd","onClick","length","newDragIs","splice","removeDragItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3a4243c7.chunk.js","sourcesContent":["import React from 'react'\r\nimport reactCSS from 'reactcss'\r\nimport {useRef, useEffect, useState} from 'react'\r\nimport { SketchPicker } from 'react-color';\r\n\r\nconst Point = ({className, point, onChangeColor}) => {\r\n    const [color, setColor] =  useState(\r\n        point.colour\r\n    )\r\n    // console.log(color[0])\r\n    const styles = reactCSS({\r\n        'default':{\r\n            container: {\r\n                position: 'absolute',\r\n                left: point.currentXY.x,\r\n                top: point.currentXY.y,\r\n              },\r\n            point: {\r\n                backgroundColor: color,\r\n            }\r\n        },\r\n    })\r\n    useEffect(()=>{\r\n        point.size = [point.ref.current.offsetWidth,point.ref.current.offsetHeight]\r\n        // setColor(point.color)\r\n        // point.ref.current.parentNode.style.left = point.currentXY.x\r\n        // point.ref.current.parentNode.style.top= point.currentXY.y\r\n        // console.log(point.ref.current.parentNode.style.left, point.ref.current.parentNode.style.top)\r\n    })\r\n    const ChangeColor=(color)=>{\r\n        // console.log(\"tT changing color to\", color, color.hex)\r\n        // onChangeColor(color)\r\n        point.colour = color.hex\r\n        setColor(color.hex)\r\n    }\r\n    point.ref = useRef(null)\r\n    \r\n    return (\r\n        <div style={styles.container}>\r\n            <div \r\n                ref={point.ref} \r\n                style={styles.point} \r\n                className=\"dragItem\" \r\n                id={point.id}\r\n                // onClick={onClick(point)}\r\n            />\r\n            {point.showPicker && \r\n            <SketchPicker\r\n                color={color}\r\n                onChange={ChangeColor}\r\n                disableAlpha={true}\r\n                presetColors={[]}\r\n            />}\r\n        </div>\r\n    )\r\n}\r\n\r\nPoint.defaultProps = {\r\n    className: \"dragItem\",\r\n}\r\n\r\nexport default Point\r\n","import React from 'react'\r\nimport Point from \"./Point\"\r\n\r\nconst Points = ({points, onChangeColor}) => {\r\n    // console.log(\"Points are \", points)\r\n    // const changeColor = (index, color)=>{\r\n    //     console.log(\"Changing color of point \"+index+\" to \",color)\r\n    // }\r\n\r\n    var Points = []\r\n    for(let i in points){\r\n        Points.push(<Point \r\n                        point={points[i]} \r\n                        // onChangeColor={(color)=>changeColor(i, color)}\r\n                        // onClick={onClick}\r\n                    />\r\n                    )\r\n    }\r\n    return Points\r\n    // return (\r\n    //     <>\r\n    //         {points.map((point)=>{\r\n    //             return(\r\n    //                 <>\r\n    //                     <Point \r\n    //                         point={point} \r\n    //                         onChangeColor={ChangeColor()}\r\n    //                         // onClick={onClick}\r\n    //                     />\r\n    //                 </>\r\n    //             )\r\n    //         })}\r\n    //     </>\r\n    // )\r\n}\r\n\r\nexport default Points\r\n","import {useState} from \"react\"\nimport Points from \"./components/Points\"\n\nfunction App() {\n    const [mouseBound, setMouseBound]=useState([\n        {   mouseDown: false,\n            start:{\n                x:0, \n                y:0\n            },\n            end:{\n                x:0, \n                y:0\n            }\n        }\n    ]);\n    const [dragIs, setDragIs] = useState([\n        {   // While not being dragged, [pointerOffset, currentXY, offset] stores the same value, the X and Y coordinate from the original position (0,0), (used in transform: translate3D(X, Y, 0))\n            // While being dragged, \n            //      pointerOffset[X, Y] stores the pointerOffset X and Y offset of the pointer to the anchor of dragItem\n            //      currentXY[X, Y] stores the total X and Y offsets from the pointerOffset position (0,0).\n            // After a drag event, all [pointerOffset, currentXY, offset] stores the same value, the X and Y coordinate from the original position (0,0); again. \n            ref: null,\n            active: false,\n            colour: \"#f5e663\",\n            showPicker: false,\n            pointerOffset: {x:0, y:0},\n            currentXY: {x:50, y:50},\n            size: [0,0]\n        }\n    ])\n    const addDragItem = ()=>{\n        const newDragItem={\n            ref: null,\n            active: false,\n            colour: \"#f5e663\",\n            showPicker: false,\n            pointerOffset: {x:0, y:0},\n            currentXY: {x:50, y:50},\n            size: [0,0]\n        }\n        setDragIs([...dragIs, newDragItem])\n    }\n    const removeDragItem = ({index})=>{\n        if (index === -1){\n            index = dragIs.length-1\n        }\n        console.log(\"Removing point with key \"+index)\n        let newDragIs = dragIs\n        newDragIs.splice(index, 1)\n        setDragIs([...newDragIs])\n        console.log(\"New points are \", dragIs)\n    }\n    const dragStart = (e)=>{\n        // mouseDown is to capture off location drags that go over inactive point\n        mouseBound.mouseDown = true;\n        setMouseBound(mouseBound)\n        // capturing target since touch and mouse output different e.target\n        var target = document.elementFromPoint(e.clientX, e.clientY)\n        // if (e.pointerType === \"touch\"){\n        //         target = document.elementFromPoint(e.clientX, e.clientY)\n        // }else{\n        //         target = e.target\n        // }\n        // if(!target.id===\"dragPalette\"){\n        //     console.log(target)\n        // }\n        if(target.classList.contains(\"dragItem\")){\n            // console.log(\"Target is\",target)\n            var index\n            for(let i in dragIs){\n                if(dragIs[i].ref.current === target){\n                    console.log(\"now \"+ i)\n                    index = i\n                }\n            }\n            // console.log(dragIs[index])     \n            console.log(\"dragStart \"+index, dragIs[index])\n            // setting pointerOffset values at the start of a drag \n            let clientXY = {x:0, y:0}\n            if (e.type.substr(0,5) === \"touch\") {\n                clientXY = {x: e.touches[0].clientX, y: e.touches[0].clientY}\n            } else {\n                clientXY = {x: e.clientX, y: e.clientY}\n            }\n            mouseBound.start = clientXY\n            mouseBound.end = clientXY\n            setMouseBound(mouseBound)\n            // console.log(\"Setting mouseBound\", mouseBound)\n            dragIs[index].pointerOffset.x = clientXY.x - dragIs[index].currentXY.x\n            dragIs[index].pointerOffset.y = clientXY.y - dragIs[index].currentXY.y\n            // console.log(\"dragStart \", dragIs[index].object.getBoundingClientRect().left, dragIs[index].object.getBoundingClientRect().top)\n            // console.log(\"dragStart initX, initY = [\" + [dragIs[index].pointerOffset[0], dragIs[index].pointerOffset[1]] + \"]\")\n            dragIs[index].active = true\n            dragIs[index].ref.current.classList.add(\"active\")\n            dragIs[index].ref.current.parentNode.style.zIndex = 1\n            // console.log(\"Now dragIs[index] is\", dragIs[index])\n            setDragIs([...dragIs])\n        }\n    }\n    const drag = (e)=>{\n        if(isAnyAcive()){\n            var index\n            for(let i in dragIs){\n                if(dragIs[i].active){\n                    index = i\n                }\n            }\n            // console.log(\"Pushing...\")\n            e.preventDefault();\n\n            // Calculating current XY \n            let clientXY = {x:0, y:0}\n            if (e.type.substr(0,5) === \"touch\") {\n                clientXY = {x: e.touches[0].clientX, y: e.touches[0].clientY}\n            } else {\n                clientXY = {x: e.clientX, y: e.clientY}\n            }\n            mouseBound.end = clientXY\n            setMouseBound(mouseBound)\n            if(!isClick(mouseBound.start, mouseBound.end)){\n                onPicker(dragIs[index], false)\n                closePickers(index)\n            }\n            dragIs[index].currentXY.x = clientXY.x - dragIs[index].pointerOffset.x\n            dragIs[index].currentXY.y = clientXY.y - dragIs[index].pointerOffset.y\n            \n            let boundXY = [[dragIs[index].ref.current.parentNode.parentNode.getBoundingClientRect().left, \n                            dragIs[index].ref.current.parentNode.parentNode.getBoundingClientRect().top\n                            ],\n                            [0,0]]\n            boundXY[1] = [boundXY[0][0]+dragIs[index].ref.current.parentNode.parentNode.clientWidth-dragIs[index].size[0], \n                            boundXY[0][1]+dragIs[index].ref.current.parentNode.parentNode.clientHeight-dragIs[index].size[1]]\n            // console.log(\"boundXY is\", boundXY);\n            dragIs[index].currentXY.x = Math.max(Math.min(dragIs[index].currentXY.x, boundXY[1][0]), boundXY[0][0])\n            dragIs[index].currentXY.y = Math.max(Math.min(dragIs[index].currentXY.y, boundXY[1][1]), boundXY[0][1])\n            dragIs[index].ref.current.parentNode.style.left = dragIs[index].currentXY.x\n            dragIs[index].ref.current.parentNode.style.top = dragIs[index].currentXY.y\n            // console.log(\"dragIs[index] is\", dragIs[index])\n            \n            setDragIs([...dragIs])\n\n        }else if(mouseBound.mouseDown){\n            // console.log(\"None active\")\n            // console.log(e)\n            dragStart(e)\n        }\n    }\n    const dragEnd = (e)=>{\n        mouseBound.mouseDown = false;\n        setMouseBound(mouseBound)\n        var index\n        for(let i in dragIs) \n            if(dragIs[i].active)\n                index = i\n        if(index){\n            dragIs[index].pointerOffset.x = dragIs[index].currentXY.x;\n            dragIs[index].pointerOffset.y = dragIs[index].currentXY.y;\n            dragIs[index].ref.current.classList.remove(\"active\")\n            dragIs[index].active = false;\n            \n            // console.log(\"mouseStart\", mouseBound.start)\n            // console.log(\"mouseEnd\", mouseBound.end)\n            // console.log(e, dragIs[index].showPicker)\n            if(isClick(mouseBound.start, mouseBound.end) && !dragIs[index].showPicker){\n                closePickers(index)\n                dragIs[index].ref.current.classList.add(\"active\")\n                dragIs[index].ref.current.parentNode.style.zIndex = 1;\n                onPicker(dragIs[index], true)\n            }\n            else{\n                onPicker(dragIs[index], false)\n                dragIs[index].ref.current.parentNode.style.zIndex = 0;\n            }\n\n            console.log(\"dragEnd \"+index, dragIs[index])\n            setDragIs([...dragIs])\n        }\n    }\n    const closePickers=(index)=>{\n        for(let i in dragIs){\n            dragIs[i].showPicker=false\n            dragIs[i].ref.current.classList.remove(\"active\")\n            dragIs[i].ref.current.parentNode.style.zIndex = 0;\n        }\n        dragIs[index].ref.current.classList.add(\"active\")\n        dragIs[index].ref.current.parentNode.style.zIndex = 1;\n        setDragIs(dragIs)\n    }\n    const isAnyAcive=()=>{\n        let active = false;\n        for (let i in dragIs){\n            active = active || dragIs[i].active; \n        }\n        return active;\n    }\n    const isPickerActive=()=>{\n        let showPicker = false;\n        for (let i in dragIs){\n            showPicker = showPicker || dragIs[i].showPicker; \n        }\n        return showPicker;\n    }\n    const onPicker=(point, state)=>{\n        // if(state)\n        //     point.showPicker = !point.showPicker\n        // else\n            point.showPicker = state\n    }\n    const isClick=(startXY, endXY)=>{\n        let tol=10\n        let value = Math.sqrt(Math.pow(endXY.x-startXY.x,2) + Math.pow(endXY.y-startXY.y,2))\n        return (value<=tol)\n    }\n    return (\n        <div className=\"App\" \n            // onTouchStart={(e)=>dragStart(e)} \n            // onMouseDown={(e)=>dragStart(e)}\n            // onTouchMove={(e)=>drag(e)} \n            // onMouseMove={(e)=>drag(e)}\n            // onTouchEnd={(e)=>dragEnd(e)} \n            // onMouseUp={(e)=>dragEnd(e)}\n\n            onPointerDown={(e)=>dragStart(e)} \n            onPointerMove={(e)=>drag(e)} \n            onPointerUp={(e)=>dragEnd(e)} \n        >\n            <div id=\"outerContainer\">\n                <div id=\"dragPalette\">\n                    {/* <Points points={dragIs} onClick={onPicker}/> */}\n                    <Points points={dragIs}/>\n                </div>\n                <div id=\"point-manager\">\n                        <button className=\"button plus\" onClick={addDragItem}></button>\n                        <button className=\"button minus\" onClick={()=> removeDragItem({index: -1})}></button>\n                </div>\n                </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './css/style.css';\nimport './css/dragPalette.css';\nimport './css/pointManager.css';\nimport App from './App';\n// import dragHandle from './js/dragHandler';\nimport reportWebVitals from './reportWebVitals';\n\n// var dragIs;\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n// dragIs = dragHandle();"],"sourceRoot":""}