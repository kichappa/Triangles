{"version":3,"sources":["components/Point.js","components/Points.js","components/Canvas.js","App.js","reportWebVitals.js","index.js"],"names":["Point","colour","points","onChangeColor","index","hex","styles","reactCSS","container","left","currentXY","x","top","y","pointContainer","display","justifyContent","alignItems","height","width","flexWrap","point","backgroundColor","picker","pointRef","useRef","containerRef","className","style","ref","id","showPicker","position","color","onChange","disableAlpha","presetColors","defaultProps","Points","onRender","useEffect","i","push","worker","window","Worker","Canvas","canvasPoints","useState","setPoints","canvas","draw","imageData","current","getContext","putImageData","requestAnimationFrame","shootPixel","ctx","offsetWidth","offsetHeight","createImageData","imDataLength","data","length","terminate","postMessage","onerror","err","console","log","onmessage","e","t0","Date","now","t1","App","mouseDown","start","end","mouseBound","setMouseBound","rgbToHslHsvHex","rgb","M","m","C","hue","V","L","rgbArr","r","g","b","Math","max","min","hsv","h","s","v","a","hsl","abs","l","colorcode","floor","toString","repeat","defaultColour","random","active","pointerOffset","size","dragIs","setDragIs","setCanvasPoints","dragStart","target","document","elementFromPoint","clientX","clientY","classList","contains","clientXY","type","substr","touches","add","zIndex","closePickers","remove","parentNode","isAnyActive","onPicker","state","isClick","startXY","endXY","sqrt","pow","set","Array","getCanvasPoints","onPointerDown","onPointerMove","preventDefault","boundXY","clientWidth","clientHeight","drag","onPointerUp","dragEnd","update","newDragIs","onClick","newDragItem","splice","removeDragItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c08be3d3.chunk.js","sourcesContent":["import React from 'react'\r\nimport reactCSS from 'reactcss'\r\nimport {useRef, useEffect, useState} from 'react'\r\nimport { SketchPicker } from 'react-color';\r\n\r\nconst Point = ({points, onChangeColor, index}) => {\r\n    var colour\r\n    if(points[index].colour.hex){\r\n        colour = points[index].colour.hex\r\n    }else{\r\n        colour = points[index].colour\r\n    }\r\n    const styles = reactCSS({\r\n        'default':{\r\n            container: {\r\n                left: points[index].currentXY.x,\r\n                top: points[index].currentXY.y,                \r\n            },\r\n            pointContainer: {\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n\t            alignItems: 'center',\r\n                height: '36px',\r\n                width: '36px',\r\n                flexWrap: 'nowrap'\r\n            },\r\n            point: {\r\n                backgroundColor: colour,\r\n            },\r\n            picker:{\r\n            }\r\n        },\r\n    })\r\n    points[index].pointRef = useRef()\r\n    points[index].containerRef = useRef()\r\n    return (\r\n        <div className=\"dragIContainer\" style={styles.container} ref={points[index].containerRef} >\r\n            {/* point container */}\r\n            <div style={styles.pointContainer}>\r\n                <div \r\n                    ref={points[index].pointRef} \r\n                    style={styles.point} \r\n                    className=\"dragItem\" \r\n                    id={points[index].id}\r\n                />\r\n            </div>\r\n            {/* Color picker */}\r\n            {points[index].showPicker && \r\n            <SketchPicker\r\n                style={{\r\n                    position: 'fixed'\r\n                }}\r\n                color={colour}\r\n                onChange={(color)=>onChangeColor(index, color)}\r\n                disableAlpha={true}\r\n                presetColors={[]}\r\n            />}\r\n        </div>\r\n    )\r\n}\r\nPoint.defaultProps = {\r\n    className: \"dragItem\",\r\n}\r\n\r\nexport default Point\r\n","import React from 'react'\r\nimport Point from \"./Point\"\r\nimport { useEffect } from 'react'\r\n\r\nconst Points = ({points, onChangeColor, onRender}) => {\r\n    useEffect(() => {\r\n        onRender()\r\n    })\r\n    var Points = []\r\n    for(let i in points){\r\n        Points.push(\r\n            <Point \r\n                points={points}\r\n                index={i} \r\n                onChangeColor={onChangeColor}\r\n            />\r\n        )\r\n    }    \r\n    return Points\r\n}\r\n\r\nexport default Points\r\n","import React, { useState, useRef, useEffect } from 'react'\r\n\r\n\r\nvar worker = new window.Worker(\"./gradientWorker.js\");;\r\n\r\nconst Canvas = ({id, canvasPoints}) => {\r\n    const [points, setPoints]=useState(canvasPoints)\r\n    const [canvas, setCanvas]=useState(useRef(null))\r\n    const draw=(imageData)=>{\r\n            var ctx = canvas.current.getContext('2d')\r\n            ctx.putImageData(imageData, 0, 0);\r\n        window.requestAnimationFrame(()=>draw(imageData))\r\n    }\r\n    const shootPixel=()=>{\r\n        var ctx = canvas.current.getContext('2d')\r\n        canvas.current.width = canvas.current.offsetWidth\r\n        canvas.current.height = canvas.current.offsetHeight\r\n        const imageData = ctx.createImageData(canvas.current.width, canvas.current.height)\r\n        var imDataLength = imageData.data.length\r\n        // Calling worker\r\n        worker.terminate()\r\n        worker = new window.Worker(\"./gradientWorker.js\");\r\n        worker.postMessage({\r\n            imageData: imageData, \r\n            points: points, \r\n            canvas: {\r\n                width: canvas.current.width, \r\n                height:canvas.current.height}\r\n        })\r\n        worker.onerror = (err) => {\r\n            console.log(\"error\", err)\r\n        };\r\n        worker.onmessage=(e)=>{\r\n            if (imDataLength === e.data.imageData.data.length){\r\n                var t0 = Date.now()\r\n                draw(e.data.imageData)\r\n                var t1=Date.now()-t0\r\n                console.log(\"drawing time \"+t1+\"ms\")  \r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setPoints(canvasPoints)\r\n        shootPixel()\r\n    },)\r\n\r\n    return (   \r\n        <canvas id={id} ref={canvas}/>\r\n    )\r\n}\r\n\r\nexport default Canvas\r\n","import {useState, useEffect} from \"react\"\r\nimport Points from \"./components/Points\"\r\nimport Canvas from \"./components/Canvas\";\r\n// import {render} from \"./js/render\"\r\n\r\nfunction App() {\r\n    const [mouseBound, setMouseBound]=useState([\r\n        {   mouseDown: false,\r\n            start:{\r\n                x:0, \r\n                y:0\r\n            },\r\n            end:{\r\n                x:0, \r\n                y:0\r\n            }\r\n        }\r\n    ]);\r\n    const rgbToHslHsvHex=(rgb)=>{\r\n        var rgbArr = [rgb.r, rgb.g, rgb.b]\r\n        var M, m, C, hue, I, V, L, Sv, Sl\r\n        M=Math.max(...rgbArr)\r\n        m=Math.min(...rgbArr)\r\n        C = M-m\r\n        I = (rgbArr[0]+rgbArr[1]+rgbArr[2])/3\r\n        // Hue\r\n        if(C===0) hue=0\r\n        else if (M===rgbArr[0]) hue=((rgbArr[1]-rgbArr[2])/C % 6)\r\n        else if (M===rgbArr[1]) hue=((rgbArr[2]-rgbArr[0])/C +2)\r\n        else if (M===rgbArr[2]) hue=((rgbArr[0]-rgbArr[1])/C +4)\r\n        hue *= 60\r\n        // Lightness and Value\r\n        V = M/255\r\n        L = (M+m)/(2*255)\r\n        // Saturation\r\n        if (V===0) Sv=0\r\n        else Sv=C/(V*255)\r\n        if (L===1 || L===0) Sl=0\r\n        else Sl=C/(255*(1-Math.abs(2*L-1)))\r\n        \r\n        hue = (hue % 360 + 360)%360\r\n        // L = (L % 1 + 1)%1\r\n        // V = (V % 1 + 1)%1\r\n        // Sv = (Sv % 1 + 1)%1\r\n        // Sl = (Sl % 1 + 1)%1\r\n        let hsv = {h: hue, s: Sv, v: V, a:1}\r\n        let hsl = {h: hue, s: Sl, l: L, a:1}\r\n        rgb.a = 1\r\n        let hex=\"#\"\r\n        for(let i in rgbArr){\r\n            let colorcode = Math.floor(rgbArr[i]).toString(16)\r\n            hex+=\"0\".repeat(2-colorcode.length)+colorcode\r\n        }\r\n        return {rgb: rgb, hsv:hsv, hsl:hsl, hex:hex}\r\n    }\r\n    var defaultColour = rgbToHslHsvHex({\r\n        r: Math.random() * 255,\r\n        g: Math.random() * 255,\r\n        b: Math.random() * 255,\r\n    })    \r\n    const [dragIs, setDragIs] = useState([\r\n        {   // While not being dragged, [pointerOffset, currentXY, offset] stores the same value, the X and Y coordinate from the original position (0,0), (used in transform: translate3D(X, Y, 0))\r\n            // While being dragged, \r\n            //      pointerOffset[X, Y] stores the pointerOffset X and Y offset of the pointer to the anchor of dragItem\r\n            //      currentXY[X, Y] stores the total X and Y offsets from the pointerOffset position (0,0).\r\n            // After a drag event, all [pointerOffset, currentXY, offset] stores the same value, the X and Y coordinate from the original position (0,0); again. \r\n            pointRef: null,\r\n            containerRef: null,\r\n            active: false,\r\n            colour: defaultColour,\r\n            showPicker: false,\r\n            pointerOffset: {x:0, y:0},\r\n            currentXY: {x:50, y:50},\r\n            size: false\r\n        }\r\n    ])  \r\n    const getCanvasPoints=(set)=>{\r\n        let points = new Array(dragIs.length)\r\n        for(let i in dragIs){\r\n            if(dragIs[i].size){\r\n                points[i] = {\r\n                    x: dragIs[i].currentXY.x+dragIs[i].size[0]/2,\r\n                    y: dragIs[i].currentXY.y+dragIs[i].size[1]/2,\r\n                    colour: dragIs[i].colour\r\n                }\r\n            }\r\n        }\r\n        if (set) setCanvasPoints(points)\r\n        return points\r\n    }\r\n    const [canvasPoints, setCanvasPoints] = useState(false)\r\n\r\n    const addDragItem = ()=>{\r\n        var currentXY={x:50, y:50}, colour\r\n        if(dragIs.length>0){\r\n            var boundXY = [[0,0],[0,0]]\r\n            boundXY[1] = [\r\n                boundXY[0][0]+dragIs[0].containerRef.current.parentNode.clientWidth-dragIs[0].size[0], \r\n                boundXY[0][1]+dragIs[0].containerRef.current.parentNode.clientHeight-dragIs[0].size[1]\r\n            ]\r\n            let x, y\r\n            x=Math.floor((Math.random() * boundXY[1][0]) + boundXY[0][0])\r\n            y=Math.floor((Math.random() * boundXY[1][1]) + boundXY[0][1])\r\n            currentXY={x:x, y:y}\r\n        }\r\n        colour={\r\n            r: Math.random() * 255,\r\n            g: Math.random() * 255,\r\n            b: Math.random() * 255,\r\n        }\r\n        colour = rgbToHslHsvHex(colour)\r\n        const newDragItem={\r\n            ref: null,\r\n            containerRef: null,\r\n            active: false,\r\n            colour: colour,\r\n            showPicker: false,\r\n            pointerOffset: {x:0, y:0},\r\n            currentXY: currentXY,\r\n            size: false\r\n        }\r\n        setDragIs([...dragIs, newDragItem])\r\n    }\r\n    const removeDragItem = ({index})=>{\r\n        if (index === -1){\r\n            index = dragIs.length-1\r\n        }\r\n        console.log(\"Removing point with key \"+index)\r\n        let newDragIs = dragIs\r\n        newDragIs.splice(index, 1)\r\n        setDragIs([...newDragIs])\r\n        console.log(\"New points are \", dragIs)\r\n    }\r\n    const dragStart = (e)=>{\r\n        // mouseDown is to capture off location drags that go over inactive point\r\n        mouseBound.mouseDown = true;\r\n        setMouseBound(mouseBound)\r\n        // capturing target since touch and mouse output different e.target\r\n        var target = document.elementFromPoint(e.clientX, e.clientY)\r\n        if(target.classList.contains(\"dragItem\")){\r\n            var index\r\n            for(let i in dragIs){\r\n                if(dragIs[i].pointRef.current === target){\r\n                    index = i\r\n                }\r\n            }\r\n            console.log(\"dragStart \"+index, dragIs[index])\r\n            let clientXY = {x:0, y:0}\r\n            if (e.type.substr(0,5) === \"touch\") {\r\n                clientXY = {x: e.touches[0].clientX, y: e.touches[0].clientY}\r\n            } else {\r\n                clientXY = {x: e.clientX, y: e.clientY}\r\n            }\r\n            mouseBound.start = clientXY\r\n            mouseBound.end = clientXY\r\n            setMouseBound(mouseBound)\r\n            dragIs[index].pointerOffset.x = clientXY.x - dragIs[index].currentXY.x\r\n            dragIs[index].pointerOffset.y = clientXY.y - dragIs[index].currentXY.y\r\n            dragIs[index].active = true\r\n            dragIs[index].pointRef.current.classList.add(\"active\")\r\n            dragIs[index].containerRef.current.style.zIndex = 1\r\n            setDragIs([...dragIs])\r\n        }\r\n    }\r\n    const drag = (e)=>{\r\n        if(isAnyActive()){\r\n            var index\r\n            for(let i in dragIs){\r\n                if(dragIs[i].active){\r\n                    index = i\r\n                }\r\n            }\r\n            e.preventDefault();\r\n            // Calculating current XY \r\n            let clientXY = {x:0, y:0}\r\n            if (e.type.substr(0,5) === \"touch\") {\r\n                clientXY = {x: e.touches[0].clientX, y: e.touches[0].clientY}\r\n            } else {\r\n                clientXY = {x: e.clientX, y: e.clientY}\r\n            }\r\n            mouseBound.end = clientXY\r\n            var target = document.elementFromPoint(clientXY.x, clientXY.y)\r\n            console.log(\"drag target is\", target)\r\n            setMouseBound(mouseBound)\r\n            if(!isClick(mouseBound.start, mouseBound.end)){\r\n                onPicker(dragIs[index], false)\r\n                closePickers(index)\r\n                var currentXY={x:0, y:0}\r\n                currentXY.x = clientXY.x - dragIs[index].pointerOffset.x\r\n                currentXY.y = clientXY.y - dragIs[index].pointerOffset.y\r\n                let boundXY = [[0,0],[0,0]]\r\n                boundXY[1] = [boundXY[0][0]+dragIs[index].containerRef.current.parentNode.clientWidth-dragIs[index].size[0], \r\n                                boundXY[0][1]+dragIs[index].containerRef.current.parentNode.clientHeight-dragIs[index].size[1]]\r\n                console.log(\"x, y = \", [Math.max(Math.min(currentXY.x, boundXY[1][0]), boundXY[0][0]), Math.max(Math.min(currentXY.y, boundXY[1][1]), boundXY[0][1])])\r\n                dragIs[index].currentXY.x = Math.max(Math.min(currentXY.x, boundXY[1][0]), boundXY[0][0])\r\n                dragIs[index].currentXY.y = Math.max(Math.min(currentXY.y, boundXY[1][1]), boundXY[0][1])\r\n                \r\n                setDragIs([...dragIs])\r\n            }\r\n\r\n        }else if(mouseBound.mouseDown){\r\n            dragStart(e)\r\n        }else{\r\n            // var target = document.elementFromPoint(e.clientX, e.clientY)\r\n            // // console.log(target)\r\n            // try{\r\n            //     if(target.tagName===\"CANVAS\")\r\n            //         console.log(target.getContext('2d').getImageData(e.clientX, e.clientY, 1, 1).data)\r\n            // }\r\n            // catch{}\r\n        }\r\n    }\r\n    const dragEnd = (e)=>{\r\n        mouseBound.mouseDown = false;\r\n        setMouseBound(mouseBound)\r\n        var index\r\n        for(let i in dragIs) \r\n            if(dragIs[i].active)\r\n                index = i\r\n        if(index){\r\n            dragIs[index].pointerOffset.x = dragIs[index].currentXY.x;\r\n            dragIs[index].pointerOffset.y = dragIs[index].currentXY.y;\r\n            dragIs[index].active = false;\r\n            if(isClick(mouseBound.start, mouseBound.end) && !dragIs[index].showPicker){\r\n                closePickers(index)\r\n                dragIs[index].pointRef.current.classList.add(\"active\")\r\n                dragIs[index].containerRef.current.style.zIndex = 2;\r\n                onPicker(dragIs[index], true)\r\n            }\r\n            else{\r\n                dragIs[index].pointRef.current.classList.remove(\"active\")\r\n                onPicker(dragIs[index], false)\r\n                dragIs[index].containerRef.current.style.zIndex = 1;\r\n            }\r\n\r\n            console.log(\"dragEnd \"+index, dragIs[index])\r\n            setDragIs([...dragIs])\r\n        }\r\n    }\r\n    const closePickers=(index)=>{\r\n        for(let i in dragIs){\r\n            dragIs[i].showPicker=false\r\n            dragIs[i].pointRef.current.classList.remove(\"active\")\r\n            dragIs[i].containerRef.current.style.zIndex = 1;\r\n        }\r\n        dragIs[index].pointRef.current.classList.add(\"active\")\r\n        dragIs[index].pointRef.current.parentNode.style.zIndex = 2;\r\n        setDragIs(dragIs)\r\n    }\r\n    const isAnyActive=()=>{\r\n        let active = false;\r\n        for (let i in dragIs){\r\n            active = active || dragIs[i].active; \r\n        }\r\n        return active;\r\n    }\r\n    const isPickerActive=()=>{\r\n        let showPicker = false;\r\n        for (let i in dragIs){\r\n            showPicker = showPicker || dragIs[i].showPicker; \r\n        }\r\n        return showPicker;\r\n    }\r\n    const onPicker=(point, state)=>{\r\n        point.showPicker = state\r\n    }\r\n    const isClick=(startXY, endXY)=>{\r\n        let tol=5\r\n        let value = Math.sqrt(Math.pow(endXY.x-startXY.x,2) + Math.pow(endXY.y-startXY.y,2))\r\n        return (value<=tol)\r\n    }\r\n    const initSizes=()=>{\r\n        let update = false\r\n        for (let i in dragIs){\r\n            if(!dragIs[i].size){\r\n                update = true\r\n                dragIs[i].size = [dragIs[i].pointRef.current.offsetWidth, dragIs[i].pointRef.current.offsetHeight]\r\n            }\r\n        } \r\n        if(update) setDragIs(dragIs)\r\n    } \r\n    const onChangeColor=(index, color)=>{\r\n        let newDragIs = [...dragIs]\r\n        newDragIs[index].colour = color\r\n        setDragIs([...newDragIs])\r\n    }\r\n    useEffect(() => {\r\n        getCanvasPoints(true)\r\n    }, [dragIs])\r\n\r\n\r\n    return (\r\n        <div className=\"App\" \r\n            onPointerDown={(e)=>dragStart(e)} \r\n            onPointerMove={(e)=>drag(e)} \r\n            onPointerUp={(e)=>dragEnd(e)} \r\n        >\r\n            <div id=\"outerContainer\">\r\n                <div id=\"dragPalette\">\r\n                    <Canvas \r\n                        id={\"gradientPalette\"} \r\n                        canvasPoints={canvasPoints}\r\n                    />\r\n                </div>\r\n                    <Points \r\n                        points={dragIs} \r\n                        onRender={initSizes} \r\n                        onChangeColor={onChangeColor}\r\n                    />\r\n                <div id=\"point-manager\">\r\n                        <button className=\"button plus\" onClick={addDragItem}></button>\r\n                        <button className=\"button minus\" onClick={()=> removeDragItem({index: -1})}></button>\r\n                </div>\r\n                </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './css/style.css';\nimport './css/dragPalette.css';\nimport './css/pointManager.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}